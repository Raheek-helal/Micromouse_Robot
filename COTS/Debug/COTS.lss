
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000022b6  0000234a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080007e  0080007e  00002368  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  00002368  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000125f  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005667  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000057c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005956  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000799b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <main>
      8a:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e7       	ldi	r22, 0x75	; 117
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MTWI_vInit>:
#include "TWI_cfg.h"



void MTWI_vInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* Interrupt enable/disable */
	CLR_BIT(TWCR, TWIE);
     ca6:	a6 e5       	ldi	r26, 0x56	; 86
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e6 e5       	ldi	r30, 0x56	; 86
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	8c 93       	st	X, r24
	/* Bit rate   */
	TWBR= 10 ;
     cb4:	e0 e2       	ldi	r30, 0x20	; 32
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	8a e0       	ldi	r24, 0x0A	; 10
     cba:	80 83       	st	Z, r24
}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <MTWI_u8SendStartCondition>:

u8 MTWI_u8SendStartCondition(void)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN) ;
     cca:	e6 e5       	ldi	r30, 0x56	; 86
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	84 ea       	ldi	r24, 0xA4	; 164
     cd0:	80 83       	st	Z, r24

	while (!(TWCR & (1<<TWINT)))
     cd2:	e6 e5       	ldi	r30, 0x56	; 86
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	88 23       	and	r24, r24
     cda:	dc f7       	brge	.-10     	; 0xcd2 <MTWI_u8SendStartCondition+0x10>
	;

	/* check status code  */
	return (TWSR & 0xF8) ;
     cdc:	e1 e2       	ldi	r30, 0x21	; 33
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	88 7f       	andi	r24, 0xF8	; 248
}
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <MTWI_u8SendRepeatedStartCondition>:


u8   MTWI_u8SendRepeatedStartCondition(void)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN) ;
     cf2:	e6 e5       	ldi	r30, 0x56	; 86
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	84 ea       	ldi	r24, 0xA4	; 164
     cf8:	80 83       	st	Z, r24

		while (!(TWCR & (1<<TWINT)))
     cfa:	e6 e5       	ldi	r30, 0x56	; 86
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	88 23       	and	r24, r24
     d02:	dc f7       	brge	.-10     	; 0xcfa <MTWI_u8SendRepeatedStartCondition+0x10>
		;

		/* check status code  */
		return (TWSR & 0xF8) ;
     d04:	e1 e2       	ldi	r30, 0x21	; 33
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	88 7f       	andi	r24, 0xF8	; 248
}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <MTWI_u8SendSlaveAddressRw>:


u8 MTWI_u8SendSlaveAddressRw(u8 A_u8Sla, u8 A_u8Rw)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <MTWI_u8SendSlaveAddressRw+0x6>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
	TWDR = (A_u8Sla << 1) | (A_u8Rw);
     d20:	e3 e2       	ldi	r30, 0x23	; 35
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	98 2f       	mov	r25, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	89 2b       	or	r24, r25
     d34:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     d36:	e6 e5       	ldi	r30, 0x56	; 86
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	84 e8       	ldi	r24, 0x84	; 132
     d3c:	80 83       	st	Z, r24
	CLR_BIT(TWCR, TWSTA) ;
     d3e:	a6 e5       	ldi	r26, 0x56	; 86
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e6 e5       	ldi	r30, 0x56	; 86
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8f 7d       	andi	r24, 0xDF	; 223
     d4a:	8c 93       	st	X, r24

	while (!(TWCR & (1<<TWINT)))
     d4c:	e6 e5       	ldi	r30, 0x56	; 86
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 23       	and	r24, r24
     d54:	dc f7       	brge	.-10     	; 0xd4c <MTWI_u8SendSlaveAddressRw+0x3a>
		;

	/* check status code  */
		return (TWSR & 0xF8) ;
     d56:	e1 e2       	ldi	r30, 0x21	; 33
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 7f       	andi	r24, 0xF8	; 248
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <MTWI_u8SendByte>:

u8 MTWI_u8SendByte(u8 A_u8Byte)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	0f 92       	push	r0
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	89 83       	std	Y+1, r24	; 0x01
	TWDR = A_u8Byte;
     d74:	e3 e2       	ldi	r30, 0x23	; 35
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     d7c:	e6 e5       	ldi	r30, 0x56	; 86
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	84 e8       	ldi	r24, 0x84	; 132
     d82:	80 83       	st	Z, r24

	while (!(TWCR & (1<<TWINT)))
     d84:	e6 e5       	ldi	r30, 0x56	; 86
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 23       	and	r24, r24
     d8c:	dc f7       	brge	.-10     	; 0xd84 <MTWI_u8SendByte+0x1c>
			;

/* check status code  */
	return (TWSR & 0xF8) ;
     d8e:	e1 e2       	ldi	r30, 0x21	; 33
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 7f       	andi	r24, 0xF8	; 248
}
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <MTWI_u8ReceiveByte>:

u8	 MTWI_u8ReceiveByte(u8* A_pu8Byte, u8 A_u8Ack)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	00 d0       	rcall	.+0      	; 0xda4 <MTWI_u8ReceiveByte+0x6>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <MTWI_u8ReceiveByte+0x8>
     da6:	0f 92       	push	r0
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	6b 83       	std	Y+3, r22	; 0x03
	switch(A_u8Ack)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	3d 83       	std	Y+5, r19	; 0x05
     dba:	2c 83       	std	Y+4, r18	; 0x04
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	9d 81       	ldd	r25, Y+5	; 0x05
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	51 f0       	breq	.+20     	; 0xdd8 <MTWI_u8ReceiveByte+0x3a>
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	21 30       	cpi	r18, 0x01	; 1
     dca:	31 05       	cpc	r19, r1
     dcc:	81 f4       	brne	.+32     	; 0xdee <MTWI_u8ReceiveByte+0x50>
	{
	case TWI_ACK:
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA) ;
     dce:	e6 e5       	ldi	r30, 0x56	; 86
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	84 ec       	ldi	r24, 0xC4	; 196
     dd4:	80 83       	st	Z, r24
     dd6:	0b c0       	rjmp	.+22     	; 0xdee <MTWI_u8ReceiveByte+0x50>
		break;
	case TWI_NOT_ACK:
		TWCR = (1<<TWINT)|(1<<TWEN) ;
     dd8:	e6 e5       	ldi	r30, 0x56	; 86
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	84 e8       	ldi	r24, 0x84	; 132
     dde:	80 83       	st	Z, r24
		CLR_BIT(TWCR, TWEA);
     de0:	a6 e5       	ldi	r26, 0x56	; 86
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e6 e5       	ldi	r30, 0x56	; 86
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 7b       	andi	r24, 0xBF	; 191
     dec:	8c 93       	st	X, r24
		break;
	}


	while (!(TWCR & (1<<TWINT)))
     dee:	e6 e5       	ldi	r30, 0x56	; 86
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 23       	and	r24, r24
     df6:	dc f7       	brge	.-10     	; 0xdee <MTWI_u8ReceiveByte+0x50>
				;

	*A_pu8Byte = TWDR ;
     df8:	e3 e2       	ldi	r30, 0x23	; 35
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	e9 81       	ldd	r30, Y+1	; 0x01
     e00:	fa 81       	ldd	r31, Y+2	; 0x02
     e02:	80 83       	st	Z, r24

	/* check status code  */
		return (TWSR & 0xF8) ;
     e04:	e1 e2       	ldi	r30, 0x21	; 33
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 7f       	andi	r24, 0xF8	; 248
}
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <MTWI_u8SendStopCondition>:

u8 MTWI_u8SendStopCondition(void)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     e24:	e6 e5       	ldi	r30, 0x56	; 86
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	84 e9       	ldi	r24, 0x94	; 148
     e2a:	80 83       	st	Z, r24

	/* check status code  */
			return (TWSR & 0xF8) ;
     e2c:	e1 e2       	ldi	r30, 0x21	; 33
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	88 7f       	andi	r24, 0xF8	; 248
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <MTWI_u8GetStatus>:

u8   MTWI_u8GetStatus(void)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & 0xF8) ;
     e42:	e1 e2       	ldi	r30, 0x21	; 33
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 7f       	andi	r24, 0xF8	; 248
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <pwm_init>:
#include <avr/io.h>
#include "../../MCAL/DIO/DIO_int.h"
#include "../../MCAL/PWM/PWM.h"

void pwm_init()
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62

    // Set OC1A (PB1) as output for PWM signal
    DIO_vSetPinDir(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);*/

	// Configure Timer1 for PWM (16-bit)
		TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
     e58:	af e4       	ldi	r26, 0x4F	; 79
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ef e4       	ldi	r30, 0x4F	; 79
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	83 6a       	ori	r24, 0xA3	; 163
     e64:	8c 93       	st	X, r24
		TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
     e66:	ae e4       	ldi	r26, 0x4E	; 78
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ee e4       	ldi	r30, 0x4E	; 78
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8a 61       	ori	r24, 0x1A	; 26
     e72:	8c 93       	st	X, r24
		ICR1 = 0xFFFF; // TOP value for 16-bit PWM
     e74:	e6 e4       	ldi	r30, 0x46	; 70
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24

		// Set OCR1A and OCR1B as output pins
		    DDRD |= (1 << DDD5) | (1 << DDD4); // Set OC1A (pin D5) and OC1B (pin D4) as outputs
     e80:	a1 e3       	ldi	r26, 0x31	; 49
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e1 e3       	ldi	r30, 0x31	; 49
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 63       	ori	r24, 0x30	; 48
     e8c:	8c 93       	st	X, r24
		   // DIO_vSetPinDir  ( DIO_PORTD, DIO_PIN5, DIO_OUTPUT );
		   // DIO_vSetPinDir  ( DIO_PORTD, DIO_PIN4, DIO_OUTPUT);
}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <set_pwm_duty_cycle>:

void set_pwm_duty_cycle(uint8_t channel, uint16_t  speed)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <set_pwm_duty_cycle+0x6>
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	7b 83       	std	Y+3, r23	; 0x03
     ea4:	6a 83       	std	Y+2, r22	; 0x02
    // Set the PWM duty cycle to control motor speed
	if(channel == pwm_A)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	88 23       	and	r24, r24
     eaa:	49 f4       	brne	.+18     	; 0xebe <set_pwm_duty_cycle+0x2a>
	{
		DIO_vSetPortVal(OCR1A, speed); // Set the duty cycle (0-255)
     eac:	ea e4       	ldi	r30, 0x4A	; 74
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	69 2f       	mov	r22, r25
     eb8:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_vSetPortVal>
     ebc:	0b c0       	rjmp	.+22     	; 0xed4 <set_pwm_duty_cycle+0x40>
	}
	else if(channel == pwm_B)
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	41 f4       	brne	.+16     	; 0xed4 <set_pwm_duty_cycle+0x40>
	{
		DIO_vSetPortVal(OCR1B, speed);
     ec4:	e8 e4       	ldi	r30, 0x48	; 72
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	69 2f       	mov	r22, r25
     ed0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DIO_vSetPortVal>
	}

}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <DIO_vSetPinDir>:

#include "DIO_int.h"

/*Pin Functions*/
void DIO_vSetPinDir  ( u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8Dir )
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	27 97       	sbiw	r28, 0x07	; 7
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	6a 83       	std	Y+2, r22	; 0x02
     ef8:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Dir == DIO_OUTPUT)
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	09 f0       	breq	.+2      	; 0xf02 <DIO_vSetPinDir+0x22>
     f00:	6f c0       	rjmp	.+222    	; 0xfe0 <DIO_vSetPinDir+0x100>
	{
		switch(A_u8PortNo)
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	3f 83       	std	Y+7, r19	; 0x07
     f0a:	2e 83       	std	Y+6, r18	; 0x06
     f0c:	8e 81       	ldd	r24, Y+6	; 0x06
     f0e:	9f 81       	ldd	r25, Y+7	; 0x07
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	91 05       	cpc	r25, r1
     f14:	49 f1       	breq	.+82     	; 0xf68 <DIO_vSetPinDir+0x88>
     f16:	2e 81       	ldd	r18, Y+6	; 0x06
     f18:	3f 81       	ldd	r19, Y+7	; 0x07
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <DIO_vSetPinDir+0x4a>
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	9f 81       	ldd	r25, Y+7	; 0x07
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	61 f0       	breq	.+24     	; 0xf40 <DIO_vSetPinDir+0x60>
     f28:	d2 c0       	rjmp	.+420    	; 0x10ce <DIO_vSetPinDir+0x1ee>
     f2a:	2e 81       	ldd	r18, Y+6	; 0x06
     f2c:	3f 81       	ldd	r19, Y+7	; 0x07
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	71 f1       	breq	.+92     	; 0xf90 <DIO_vSetPinDir+0xb0>
     f34:	8e 81       	ldd	r24, Y+6	; 0x06
     f36:	9f 81       	ldd	r25, Y+7	; 0x07
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	e9 f1       	breq	.+122    	; 0xfb8 <DIO_vSetPinDir+0xd8>
     f3e:	c7 c0       	rjmp	.+398    	; 0x10ce <DIO_vSetPinDir+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(DDRA,A_u8PinNo);
     f40:	aa e3       	ldi	r26, 0x3A	; 58
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e3       	ldi	r30, 0x3A	; 58
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_vSetPinDir+0x7e>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_vSetPinDir+0x7a>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	b3 c0       	rjmp	.+358    	; 0x10ce <DIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(DDRB,A_u8PinNo);
     f68:	a7 e3       	ldi	r26, 0x37	; 55
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e7 e3       	ldi	r30, 0x37	; 55
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_vSetPinDir+0xa6>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_vSetPinDir+0xa2>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	9f c0       	rjmp	.+318    	; 0x10ce <DIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(DDRC,A_u8PinNo);
     f90:	a4 e3       	ldi	r26, 0x34	; 52
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e4 e3       	ldi	r30, 0x34	; 52
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_vSetPinDir+0xce>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_vSetPinDir+0xca>
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	8b c0       	rjmp	.+278    	; 0x10ce <DIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(DDRD,A_u8PinNo);
     fb8:	a1 e3       	ldi	r26, 0x31	; 49
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e1 e3       	ldi	r30, 0x31	; 49
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_vSetPinDir+0xf6>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_vSetPinDir+0xf2>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	77 c0       	rjmp	.+238    	; 0x10ce <DIO_vSetPinDir+0x1ee>
			break;
		}
	}
	else if(A_u8Dir == DIO_INPUT)
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	88 23       	and	r24, r24
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <DIO_vSetPinDir+0x108>
     fe6:	73 c0       	rjmp	.+230    	; 0x10ce <DIO_vSetPinDir+0x1ee>
	{
		switch(A_u8PortNo)
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	3d 83       	std	Y+5, r19	; 0x05
     ff0:	2c 83       	std	Y+4, r18	; 0x04
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	91 05       	cpc	r25, r1
     ffa:	59 f1       	breq	.+86     	; 0x1052 <DIO_vSetPinDir+0x172>
     ffc:	2c 81       	ldd	r18, Y+4	; 0x04
     ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    1000:	22 30       	cpi	r18, 0x02	; 2
    1002:	31 05       	cpc	r19, r1
    1004:	2c f4       	brge	.+10     	; 0x1010 <DIO_vSetPinDir+0x130>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	69 f0       	breq	.+26     	; 0x1028 <DIO_vSetPinDir+0x148>
    100e:	5f c0       	rjmp	.+190    	; 0x10ce <DIO_vSetPinDir+0x1ee>
    1010:	2c 81       	ldd	r18, Y+4	; 0x04
    1012:	3d 81       	ldd	r19, Y+5	; 0x05
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	89 f1       	breq	.+98     	; 0x107c <DIO_vSetPinDir+0x19c>
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	91 05       	cpc	r25, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <DIO_vSetPinDir+0x146>
    1024:	40 c0       	rjmp	.+128    	; 0x10a6 <DIO_vSetPinDir+0x1c6>
    1026:	53 c0       	rjmp	.+166    	; 0x10ce <DIO_vSetPinDir+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(DDRA,A_u8PinNo);
    1028:	aa e3       	ldi	r26, 0x3A	; 58
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e3       	ldi	r30, 0x3A	; 58
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_vSetPinDir+0x166>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_vSetPinDir+0x162>
    104a:	80 95       	com	r24
    104c:	84 23       	and	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	3e c0       	rjmp	.+124    	; 0x10ce <DIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(DDRB,A_u8PinNo);
    1052:	a7 e3       	ldi	r26, 0x37	; 55
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e7 e3       	ldi	r30, 0x37	; 55
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_vSetPinDir+0x190>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_vSetPinDir+0x18c>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	29 c0       	rjmp	.+82     	; 0x10ce <DIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(DDRC,A_u8PinNo);
    107c:	a4 e3       	ldi	r26, 0x34	; 52
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e4 e3       	ldi	r30, 0x34	; 52
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_vSetPinDir+0x1ba>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_vSetPinDir+0x1b6>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	14 c0       	rjmp	.+40     	; 0x10ce <DIO_vSetPinDir+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(DDRD,A_u8PinNo);
    10a6:	a1 e3       	ldi	r26, 0x31	; 49
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e1 e3       	ldi	r30, 0x31	; 49
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_vSetPinDir+0x1e4>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_vSetPinDir+0x1e0>
    10c8:	80 95       	com	r24
    10ca:	84 23       	and	r24, r20
    10cc:	8c 93       	st	X, r24
			break;
		}
	}

}
    10ce:	27 96       	adiw	r28, 0x07	; 7
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <DIO_vSetPinVal>:
void DIO_vSetPinVal  ( u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8Val )
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	27 97       	sbiw	r28, 0x07	; 7
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	6a 83       	std	Y+2, r22	; 0x02
    10f8:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Val == DIO_OUTPUT)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	09 f0       	breq	.+2      	; 0x1102 <DIO_vSetPinVal+0x22>
    1100:	6f c0       	rjmp	.+222    	; 0x11e0 <DIO_vSetPinVal+0x100>
		{
			switch(A_u8PortNo)
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3f 83       	std	Y+7, r19	; 0x07
    110a:	2e 83       	std	Y+6, r18	; 0x06
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
    110e:	9f 81       	ldd	r25, Y+7	; 0x07
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	91 05       	cpc	r25, r1
    1114:	49 f1       	breq	.+82     	; 0x1168 <DIO_vSetPinVal+0x88>
    1116:	2e 81       	ldd	r18, Y+6	; 0x06
    1118:	3f 81       	ldd	r19, Y+7	; 0x07
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	2c f4       	brge	.+10     	; 0x112a <DIO_vSetPinVal+0x4a>
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	9f 81       	ldd	r25, Y+7	; 0x07
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	61 f0       	breq	.+24     	; 0x1140 <DIO_vSetPinVal+0x60>
    1128:	d2 c0       	rjmp	.+420    	; 0x12ce <DIO_vSetPinVal+0x1ee>
    112a:	2e 81       	ldd	r18, Y+6	; 0x06
    112c:	3f 81       	ldd	r19, Y+7	; 0x07
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	71 f1       	breq	.+92     	; 0x1190 <DIO_vSetPinVal+0xb0>
    1134:	8e 81       	ldd	r24, Y+6	; 0x06
    1136:	9f 81       	ldd	r25, Y+7	; 0x07
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	91 05       	cpc	r25, r1
    113c:	e9 f1       	breq	.+122    	; 0x11b8 <DIO_vSetPinVal+0xd8>
    113e:	c7 c0       	rjmp	.+398    	; 0x12ce <DIO_vSetPinVal+0x1ee>
			{
			case DIO_PORTA:
				SET_BIT(PORTA,A_u8PinNo);
    1140:	ab e3       	ldi	r26, 0x3B	; 59
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_vSetPinVal+0x7e>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_vSetPinVal+0x7a>
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	b3 c0       	rjmp	.+358    	; 0x12ce <DIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTB:
				SET_BIT(PORTA,A_u8PinNo);
    1168:	ab e3       	ldi	r26, 0x3B	; 59
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	eb e3       	ldi	r30, 0x3B	; 59
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_vSetPinVal+0xa6>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_vSetPinVal+0xa2>
    118a:	84 2b       	or	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	9f c0       	rjmp	.+318    	; 0x12ce <DIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC,A_u8PinNo);
    1190:	a5 e3       	ldi	r26, 0x35	; 53
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e5 e3       	ldi	r30, 0x35	; 53
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_vSetPinVal+0xce>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_vSetPinVal+0xca>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	8b c0       	rjmp	.+278    	; 0x12ce <DIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD,A_u8PinNo);
    11b8:	a2 e3       	ldi	r26, 0x32	; 50
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_vSetPinVal+0xf6>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_vSetPinVal+0xf2>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	77 c0       	rjmp	.+238    	; 0x12ce <DIO_vSetPinVal+0x1ee>
				break;
			}
		}
		else if(A_u8Val == DIO_INPUT)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	88 23       	and	r24, r24
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <DIO_vSetPinVal+0x108>
    11e6:	73 c0       	rjmp	.+230    	; 0x12ce <DIO_vSetPinVal+0x1ee>
		{
			switch(A_u8PortNo)
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3d 83       	std	Y+5, r19	; 0x05
    11f0:	2c 83       	std	Y+4, r18	; 0x04
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	59 f1       	breq	.+86     	; 0x1252 <DIO_vSetPinVal+0x172>
    11fc:	2c 81       	ldd	r18, Y+4	; 0x04
    11fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	2c f4       	brge	.+10     	; 0x1210 <DIO_vSetPinVal+0x130>
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	69 f0       	breq	.+26     	; 0x1228 <DIO_vSetPinVal+0x148>
    120e:	5f c0       	rjmp	.+190    	; 0x12ce <DIO_vSetPinVal+0x1ee>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	89 f1       	breq	.+98     	; 0x127c <DIO_vSetPinVal+0x19c>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	91 05       	cpc	r25, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <DIO_vSetPinVal+0x146>
    1224:	40 c0       	rjmp	.+128    	; 0x12a6 <DIO_vSetPinVal+0x1c6>
    1226:	53 c0       	rjmp	.+166    	; 0x12ce <DIO_vSetPinVal+0x1ee>
			{
			case DIO_PORTA:
				CLR_BIT(PORTA,A_u8PinNo);
    1228:	ab e3       	ldi	r26, 0x3B	; 59
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	eb e3       	ldi	r30, 0x3B	; 59
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_vSetPinVal+0x166>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_vSetPinVal+0x162>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	3e c0       	rjmp	.+124    	; 0x12ce <DIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTB:
				CLR_BIT(PORTB,A_u8PinNo);
    1252:	a8 e3       	ldi	r26, 0x38	; 56
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_vSetPinVal+0x190>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_vSetPinVal+0x18c>
    1274:	80 95       	com	r24
    1276:	84 23       	and	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	29 c0       	rjmp	.+82     	; 0x12ce <DIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTC:
				CLR_BIT(PORTC,A_u8PinNo);
    127c:	a5 e3       	ldi	r26, 0x35	; 53
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e5 e3       	ldi	r30, 0x35	; 53
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_vSetPinVal+0x1ba>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_vSetPinVal+0x1b6>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <DIO_vSetPinVal+0x1ee>
				break;
			case DIO_PORTD:
				CLR_BIT(PORTD,A_u8PinNo);
    12a6:	a2 e3       	ldi	r26, 0x32	; 50
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e2 e3       	ldi	r30, 0x32	; 50
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_vSetPinVal+0x1e4>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_vSetPinVal+0x1e0>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
				break;
			}
		}
}
    12ce:	27 96       	adiw	r28, 0x07	; 7
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <DIO_u8GetPinVal>:
u8   DIO_u8GetPinVal ( u8 A_u8PortNo, u8 A_u8PinNo )
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <DIO_u8GetPinVal+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <DIO_u8GetPinVal+0x8>
    12e8:	0f 92       	push	r0
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal = 0;       //the variable will be returned
    12f2:	19 82       	std	Y+1, r1	; 0x01

	switch(A_u8PortNo)
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3d 83       	std	Y+5, r19	; 0x05
    12fc:	2c 83       	std	Y+4, r18	; 0x04
    12fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1300:	5d 81       	ldd	r21, Y+5	; 0x05
    1302:	41 30       	cpi	r20, 0x01	; 1
    1304:	51 05       	cpc	r21, r1
    1306:	41 f1       	breq	.+80     	; 0x1358 <DIO_u8GetPinVal+0x78>
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	9d 81       	ldd	r25, Y+5	; 0x05
    130c:	82 30       	cpi	r24, 0x02	; 2
    130e:	91 05       	cpc	r25, r1
    1310:	34 f4       	brge	.+12     	; 0x131e <DIO_u8GetPinVal+0x3e>
    1312:	2c 81       	ldd	r18, Y+4	; 0x04
    1314:	3d 81       	ldd	r19, Y+5	; 0x05
    1316:	21 15       	cp	r18, r1
    1318:	31 05       	cpc	r19, r1
    131a:	61 f0       	breq	.+24     	; 0x1334 <DIO_u8GetPinVal+0x54>
    131c:	52 c0       	rjmp	.+164    	; 0x13c2 <DIO_u8GetPinVal+0xe2>
    131e:	4c 81       	ldd	r20, Y+4	; 0x04
    1320:	5d 81       	ldd	r21, Y+5	; 0x05
    1322:	42 30       	cpi	r20, 0x02	; 2
    1324:	51 05       	cpc	r21, r1
    1326:	51 f1       	breq	.+84     	; 0x137c <DIO_u8GetPinVal+0x9c>
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	91 05       	cpc	r25, r1
    1330:	b9 f1       	breq	.+110    	; 0x13a0 <DIO_u8GetPinVal+0xc0>
    1332:	47 c0       	rjmp	.+142    	; 0x13c2 <DIO_u8GetPinVal+0xe2>
	{
	case DIO_PORTA:
		L_u8PinVal = GET_BIT(PINA,A_u8PinNo);
    1334:	e9 e3       	ldi	r30, 0x39	; 57
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a9 01       	movw	r20, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_u8GetPinVal+0x6c>
    1348:	55 95       	asr	r21
    134a:	47 95       	ror	r20
    134c:	8a 95       	dec	r24
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_u8GetPinVal+0x68>
    1350:	ca 01       	movw	r24, r20
    1352:	81 70       	andi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	35 c0       	rjmp	.+106    	; 0x13c2 <DIO_u8GetPinVal+0xe2>
		break;
	case DIO_PORTB:
		L_u8PinVal = GET_BIT(PINB,A_u8PinNo);
    1358:	e6 e3       	ldi	r30, 0x36	; 54
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	a9 01       	movw	r20, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_u8GetPinVal+0x90>
    136c:	55 95       	asr	r21
    136e:	47 95       	ror	r20
    1370:	8a 95       	dec	r24
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_u8GetPinVal+0x8c>
    1374:	ca 01       	movw	r24, r20
    1376:	81 70       	andi	r24, 0x01	; 1
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	23 c0       	rjmp	.+70     	; 0x13c2 <DIO_u8GetPinVal+0xe2>
		break;
	case DIO_PORTC:
		L_u8PinVal = GET_BIT(PINC,A_u8PinNo);
    137c:	e3 e3       	ldi	r30, 0x33	; 51
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a9 01       	movw	r20, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_u8GetPinVal+0xb4>
    1390:	55 95       	asr	r21
    1392:	47 95       	ror	r20
    1394:	8a 95       	dec	r24
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_u8GetPinVal+0xb0>
    1398:	ca 01       	movw	r24, r20
    139a:	81 70       	andi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	11 c0       	rjmp	.+34     	; 0x13c2 <DIO_u8GetPinVal+0xe2>
		break;
	case DIO_PORTD:
		L_u8PinVal = GET_BIT(PIND,A_u8PinNo);
    13a0:	e0 e3       	ldi	r30, 0x30	; 48
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a9 01       	movw	r20, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_u8GetPinVal+0xd8>
    13b4:	55 95       	asr	r21
    13b6:	47 95       	ror	r20
    13b8:	8a 95       	dec	r24
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_u8GetPinVal+0xd4>
    13bc:	ca 01       	movw	r24, r20
    13be:	81 70       	andi	r24, 0x01	; 1
    13c0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return L_u8PinVal;
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <DIO_vSetPortDir>:
/*Port Functions*/
void DIO_vSetPortDir ( u8 A_u8PortNo, u8 A_u8Dir )
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <DIO_vSetPortDir+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <DIO_vSetPortDir+0x8>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	3c 83       	std	Y+4, r19	; 0x04
    13ec:	2b 83       	std	Y+3, r18	; 0x03
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	d1 f0       	breq	.+52     	; 0x142c <DIO_vSetPortDir+0x58>
    13f8:	2b 81       	ldd	r18, Y+3	; 0x03
    13fa:	3c 81       	ldd	r19, Y+4	; 0x04
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	2c f4       	brge	.+10     	; 0x140c <DIO_vSetPortDir+0x38>
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	61 f0       	breq	.+24     	; 0x1422 <DIO_vSetPortDir+0x4e>
    140a:	1e c0       	rjmp	.+60     	; 0x1448 <DIO_vSetPortDir+0x74>
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	3c 81       	ldd	r19, Y+4	; 0x04
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	81 f0       	breq	.+32     	; 0x1436 <DIO_vSetPortDir+0x62>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	91 05       	cpc	r25, r1
    141e:	81 f0       	breq	.+32     	; 0x1440 <DIO_vSetPortDir+0x6c>
    1420:	13 c0       	rjmp	.+38     	; 0x1448 <DIO_vSetPortDir+0x74>
	{
	case DIO_PORTA:
		DDRA = A_u8Dir;
    1422:	ea e3       	ldi	r30, 0x3A	; 58
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	80 83       	st	Z, r24
    142a:	0e c0       	rjmp	.+28     	; 0x1448 <DIO_vSetPortDir+0x74>
		break;
	case DIO_PORTB:
		DDRB = A_u8Dir;
    142c:	e7 e3       	ldi	r30, 0x37	; 55
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	80 83       	st	Z, r24
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <DIO_vSetPortDir+0x74>
		break;
	case DIO_PORTC:
		DDRC = A_u8Dir;
    1436:	e4 e3       	ldi	r30, 0x34	; 52
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	80 83       	st	Z, r24
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <DIO_vSetPortDir+0x74>
		break;
	case DIO_PORTD:
		DDRD = A_u8Dir;
    1440:	e1 e3       	ldi	r30, 0x31	; 49
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	80 83       	st	Z, r24
		break;
	}
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <DIO_vSetPortVal>:
void DIO_vSetPortVal ( u8 A_u8PortNo, u8 Au8Val )
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_vSetPortVal+0x6>
    145c:	00 d0       	rcall	.+0      	; 0x145e <DIO_vSetPortVal+0x8>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	3c 83       	std	Y+4, r19	; 0x04
    146e:	2b 83       	std	Y+3, r18	; 0x03
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 05       	cpc	r25, r1
    1478:	d1 f0       	breq	.+52     	; 0x14ae <DIO_vSetPortVal+0x58>
    147a:	2b 81       	ldd	r18, Y+3	; 0x03
    147c:	3c 81       	ldd	r19, Y+4	; 0x04
    147e:	22 30       	cpi	r18, 0x02	; 2
    1480:	31 05       	cpc	r19, r1
    1482:	2c f4       	brge	.+10     	; 0x148e <DIO_vSetPortVal+0x38>
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	61 f0       	breq	.+24     	; 0x14a4 <DIO_vSetPortVal+0x4e>
    148c:	1e c0       	rjmp	.+60     	; 0x14ca <DIO_vSetPortVal+0x74>
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	3c 81       	ldd	r19, Y+4	; 0x04
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	81 f0       	breq	.+32     	; 0x14b8 <DIO_vSetPortVal+0x62>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	91 05       	cpc	r25, r1
    14a0:	81 f0       	breq	.+32     	; 0x14c2 <DIO_vSetPortVal+0x6c>
    14a2:	13 c0       	rjmp	.+38     	; 0x14ca <DIO_vSetPortVal+0x74>
	{
	case DIO_PORTA:
		PORTA = Au8Val;
    14a4:	eb e3       	ldi	r30, 0x3B	; 59
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	80 83       	st	Z, r24
    14ac:	0e c0       	rjmp	.+28     	; 0x14ca <DIO_vSetPortVal+0x74>
		break;
	case DIO_PORTB:
		PORTB = Au8Val;
    14ae:	e8 e3       	ldi	r30, 0x38	; 56
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	80 83       	st	Z, r24
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <DIO_vSetPortVal+0x74>
		break;
	case DIO_PORTC:
		PORTC = Au8Val;
    14b8:	e5 e3       	ldi	r30, 0x35	; 53
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	80 83       	st	Z, r24
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <DIO_vSetPortVal+0x74>
		break;
	case DIO_PORTD:
		PORTD = Au8Val;
    14c2:	e2 e3       	ldi	r30, 0x32	; 50
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
		break;
	}
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <DIO_GetPortVal>:
u8   DIO_GetPortVal  ( u8 A_u8PortNo )
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <DIO_GetPortVal+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <DIO_GetPortVal+0x8>
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortVal = 0;       //the variable will be returned
    14e6:	19 82       	std	Y+1, r1	; 0x01

		switch(A_u8PortNo)
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3c 83       	std	Y+4, r19	; 0x04
    14f0:	2b 83       	std	Y+3, r18	; 0x03
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	91 05       	cpc	r25, r1
    14fa:	d1 f0       	breq	.+52     	; 0x1530 <DIO_GetPortVal+0x58>
    14fc:	2b 81       	ldd	r18, Y+3	; 0x03
    14fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	2c f4       	brge	.+10     	; 0x1510 <DIO_GetPortVal+0x38>
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	61 f0       	breq	.+24     	; 0x1526 <DIO_GetPortVal+0x4e>
    150e:	1e c0       	rjmp	.+60     	; 0x154c <DIO_GetPortVal+0x74>
    1510:	2b 81       	ldd	r18, Y+3	; 0x03
    1512:	3c 81       	ldd	r19, Y+4	; 0x04
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	81 f0       	breq	.+32     	; 0x153a <DIO_GetPortVal+0x62>
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	91 05       	cpc	r25, r1
    1522:	81 f0       	breq	.+32     	; 0x1544 <DIO_GetPortVal+0x6c>
    1524:	13 c0       	rjmp	.+38     	; 0x154c <DIO_GetPortVal+0x74>
		{
		case DIO_PORTA:
			L_u8PortVal = PINA;
    1526:	e9 e3       	ldi	r30, 0x39	; 57
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	0e c0       	rjmp	.+28     	; 0x154c <DIO_GetPortVal+0x74>
			break;
		case DIO_PORTB:
			L_u8PortVal = PINB;
    1530:	e6 e3       	ldi	r30, 0x36	; 54
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	09 c0       	rjmp	.+18     	; 0x154c <DIO_GetPortVal+0x74>
			break;
		case DIO_PORTC:
			L_u8PortVal = PINC;
    153a:	e3 e3       	ldi	r30, 0x33	; 51
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	04 c0       	rjmp	.+8      	; 0x154c <DIO_GetPortVal+0x74>
			break;
		case DIO_PORTD:
			L_u8PortVal = PIND;
    1544:	e0 e3       	ldi	r30, 0x30	; 48
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return L_u8PortVal;
    154c:	89 81       	ldd	r24, Y+1	; 0x01
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <ultrasonic_init>:

#define ULTRASONIC_TRIGGER_PIN 2
#define ULTRASONIC_ECHO_PIN 3

void ultrasonic_init()
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    // Configure trigger pin as output and echo pin as input
    DDRD |= (1 << ULTRASONIC_TRIGGER_PIN);
    1564:	a1 e3       	ldi	r26, 0x31	; 49
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e1 e3       	ldi	r30, 0x31	; 49
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	84 60       	ori	r24, 0x04	; 4
    1570:	8c 93       	st	X, r24
    DDRD &= ~(1 << ULTRASONIC_ECHO_PIN);
    1572:	a1 e3       	ldi	r26, 0x31	; 49
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e1 e3       	ldi	r30, 0x31	; 49
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	87 7f       	andi	r24, 0xF7	; 247
    157e:	8c 93       	st	X, r24
}
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <ultrasonic_get_distance>:

uint16_t ultrasonic_get_distance()
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	6e 97       	sbiw	r28, 0x1e	; 30
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    uint16_t distance;
    uint32_t duration;

    // Send a 10us pulse on the trigger pin
    PORTD |= (1 << ULTRASONIC_TRIGGER_PIN);
    159a:	a2 e3       	ldi	r26, 0x32	; 50
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e2 e3       	ldi	r30, 0x32	; 50
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	84 60       	ori	r24, 0x04	; 4
    15a6:	8c 93       	st	X, r24
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a0 e2       	ldi	r26, 0x20	; 32
    15ae:	b1 e4       	ldi	r27, 0x41	; 65
    15b0:	8d 8b       	std	Y+21, r24	; 0x15
    15b2:	9e 8b       	std	Y+22, r25	; 0x16
    15b4:	af 8b       	std	Y+23, r26	; 0x17
    15b6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15b8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ba:	7e 89       	ldd	r23, Y+22	; 0x16
    15bc:	8f 89       	ldd	r24, Y+23	; 0x17
    15be:	98 8d       	ldd	r25, Y+24	; 0x18
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	50 e4       	ldi	r21, 0x40	; 64
    15c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	89 8b       	std	Y+17, r24	; 0x11
    15d2:	9a 8b       	std	Y+18, r25	; 0x12
    15d4:	ab 8b       	std	Y+19, r26	; 0x13
    15d6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15d8:	69 89       	ldd	r22, Y+17	; 0x11
    15da:	7a 89       	ldd	r23, Y+18	; 0x12
    15dc:	8b 89       	ldd	r24, Y+19	; 0x13
    15de:	9c 89       	ldd	r25, Y+20	; 0x14
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e8       	ldi	r20, 0x80	; 128
    15e6:	5f e3       	ldi	r21, 0x3F	; 63
    15e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ec:	88 23       	and	r24, r24
    15ee:	1c f4       	brge	.+6      	; 0x15f6 <ultrasonic_get_distance+0x70>
		__ticks = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	88 8b       	std	Y+16, r24	; 0x10
    15f4:	91 c0       	rjmp	.+290    	; 0x1718 <ultrasonic_get_distance+0x192>
	else if (__tmp > 255)
    15f6:	69 89       	ldd	r22, Y+17	; 0x11
    15f8:	7a 89       	ldd	r23, Y+18	; 0x12
    15fa:	8b 89       	ldd	r24, Y+19	; 0x13
    15fc:	9c 89       	ldd	r25, Y+20	; 0x14
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4f e7       	ldi	r20, 0x7F	; 127
    1604:	53 e4       	ldi	r21, 0x43	; 67
    1606:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    160a:	18 16       	cp	r1, r24
    160c:	0c f0       	brlt	.+2      	; 0x1610 <ultrasonic_get_distance+0x8a>
    160e:	7b c0       	rjmp	.+246    	; 0x1706 <ultrasonic_get_distance+0x180>
	{
		_delay_ms(__us / 1000.0);
    1610:	6d 89       	ldd	r22, Y+21	; 0x15
    1612:	7e 89       	ldd	r23, Y+22	; 0x16
    1614:	8f 89       	ldd	r24, Y+23	; 0x17
    1616:	98 8d       	ldd	r25, Y+24	; 0x18
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	54 e4       	ldi	r21, 0x44	; 68
    1620:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8c 87       	std	Y+12, r24	; 0x0c
    162a:	9d 87       	std	Y+13, r25	; 0x0d
    162c:	ae 87       	std	Y+14, r26	; 0x0e
    162e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1630:	6c 85       	ldd	r22, Y+12	; 0x0c
    1632:	7d 85       	ldd	r23, Y+13	; 0x0d
    1634:	8e 85       	ldd	r24, Y+14	; 0x0e
    1636:	9f 85       	ldd	r25, Y+15	; 0x0f
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e8       	ldi	r19, 0x80	; 128
    163c:	4b e3       	ldi	r20, 0x3B	; 59
    163e:	55 e4       	ldi	r21, 0x45	; 69
    1640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	88 87       	std	Y+8, r24	; 0x08
    164a:	99 87       	std	Y+9, r25	; 0x09
    164c:	aa 87       	std	Y+10, r26	; 0x0a
    164e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1650:	68 85       	ldd	r22, Y+8	; 0x08
    1652:	79 85       	ldd	r23, Y+9	; 0x09
    1654:	8a 85       	ldd	r24, Y+10	; 0x0a
    1656:	9b 85       	ldd	r25, Y+11	; 0x0b
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e8       	ldi	r20, 0x80	; 128
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1664:	88 23       	and	r24, r24
    1666:	2c f4       	brge	.+10     	; 0x1672 <ultrasonic_get_distance+0xec>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9f 83       	std	Y+7, r25	; 0x07
    166e:	8e 83       	std	Y+6, r24	; 0x06
    1670:	3f c0       	rjmp	.+126    	; 0x16f0 <ultrasonic_get_distance+0x16a>
	else if (__tmp > 65535)
    1672:	68 85       	ldd	r22, Y+8	; 0x08
    1674:	79 85       	ldd	r23, Y+9	; 0x09
    1676:	8a 85       	ldd	r24, Y+10	; 0x0a
    1678:	9b 85       	ldd	r25, Y+11	; 0x0b
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	3f ef       	ldi	r19, 0xFF	; 255
    167e:	4f e7       	ldi	r20, 0x7F	; 127
    1680:	57 e4       	ldi	r21, 0x47	; 71
    1682:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1686:	18 16       	cp	r1, r24
    1688:	4c f5       	brge	.+82     	; 0x16dc <ultrasonic_get_distance+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	6c 85       	ldd	r22, Y+12	; 0x0c
    168c:	7d 85       	ldd	r23, Y+13	; 0x0d
    168e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1690:	9f 85       	ldd	r25, Y+15	; 0x0f
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e2       	ldi	r20, 0x20	; 32
    1698:	51 e4       	ldi	r21, 0x41	; 65
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9f 83       	std	Y+7, r25	; 0x07
    16b0:	8e 83       	std	Y+6, r24	; 0x06
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <ultrasonic_get_distance+0x14c>
    16b4:	8c e2       	ldi	r24, 0x2C	; 44
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	9d 83       	std	Y+5, r25	; 0x05
    16ba:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	9d 81       	ldd	r25, Y+5	; 0x05
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <ultrasonic_get_distance+0x13a>
    16c4:	9d 83       	std	Y+5, r25	; 0x05
    16c6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ca:	9f 81       	ldd	r25, Y+7	; 0x07
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	9f 83       	std	Y+7, r25	; 0x07
    16d0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d2:	8e 81       	ldd	r24, Y+6	; 0x06
    16d4:	9f 81       	ldd	r25, Y+7	; 0x07
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <ultrasonic_get_distance+0x12e>
    16da:	24 c0       	rjmp	.+72     	; 0x1724 <ultrasonic_get_distance+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	68 85       	ldd	r22, Y+8	; 0x08
    16de:	79 85       	ldd	r23, Y+9	; 0x09
    16e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9f 83       	std	Y+7, r25	; 0x07
    16ee:	8e 83       	std	Y+6, r24	; 0x06
    16f0:	8e 81       	ldd	r24, Y+6	; 0x06
    16f2:	9f 81       	ldd	r25, Y+7	; 0x07
    16f4:	9b 83       	std	Y+3, r25	; 0x03
    16f6:	8a 83       	std	Y+2, r24	; 0x02
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	9b 81       	ldd	r25, Y+3	; 0x03
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <ultrasonic_get_distance+0x176>
    1700:	9b 83       	std	Y+3, r25	; 0x03
    1702:	8a 83       	std	Y+2, r24	; 0x02
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <ultrasonic_get_distance+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1706:	69 89       	ldd	r22, Y+17	; 0x11
    1708:	7a 89       	ldd	r23, Y+18	; 0x12
    170a:	8b 89       	ldd	r24, Y+19	; 0x13
    170c:	9c 89       	ldd	r25, Y+20	; 0x14
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	88 8b       	std	Y+16, r24	; 0x10
    1718:	88 89       	ldd	r24, Y+16	; 0x10
    171a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	8a 95       	dec	r24
    1720:	f1 f7       	brne	.-4      	; 0x171e <ultrasonic_get_distance+0x198>
    1722:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    PORTD &= ~(1 << ULTRASONIC_TRIGGER_PIN);
    1724:	a2 e3       	ldi	r26, 0x32	; 50
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e2 e3       	ldi	r30, 0x32	; 50
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	8b 7f       	andi	r24, 0xFB	; 251
    1730:	8c 93       	st	X, r24

    // Measure the duration of the pulse on the echo pin
    while (!(PIND & (1 << ULTRASONIC_ECHO_PIN))); // Wait for the rising edge
    1732:	e0 e3       	ldi	r30, 0x30	; 48
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	88 70       	andi	r24, 0x08	; 8
    173e:	90 70       	andi	r25, 0x00	; 0
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	b9 f3       	breq	.-18     	; 0x1732 <ultrasonic_get_distance+0x1ac>
    TCNT1 = 0; // Reset Timer1
    1744:	ec e4       	ldi	r30, 0x4C	; 76
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	11 82       	std	Z+1, r1	; 0x01
    174a:	10 82       	st	Z, r1
    TCCR1B |= (1 << CS11); // Start Timer1 with prescaler 8
    174c:	ae e4       	ldi	r26, 0x4E	; 78
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ee e4       	ldi	r30, 0x4E	; 78
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	82 60       	ori	r24, 0x02	; 2
    1758:	8c 93       	st	X, r24

    while (PIND & (1 << ULTRASONIC_ECHO_PIN)); // Wait for the falling edge
    175a:	e0 e3       	ldi	r30, 0x30	; 48
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	88 70       	andi	r24, 0x08	; 8
    1766:	90 70       	andi	r25, 0x00	; 0
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	b9 f7       	brne	.-18     	; 0x175a <ultrasonic_get_distance+0x1d4>
    duration = TCNT1; // Read Timer1 value
    176c:	ec e4       	ldi	r30, 0x4C	; 76
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	cc 01       	movw	r24, r24
    1776:	a0 e0       	ldi	r26, 0x00	; 0
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	89 8f       	std	Y+25, r24	; 0x19
    177c:	9a 8f       	std	Y+26, r25	; 0x1a
    177e:	ab 8f       	std	Y+27, r26	; 0x1b
    1780:	bc 8f       	std	Y+28, r27	; 0x1c

    // Calculate distance in cm based on the duration
    distance = duration / 58; // Conversion factor for ultrasonic sensor HC-SR04
    1782:	89 8d       	ldd	r24, Y+25	; 0x19
    1784:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1786:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1788:	bc 8d       	ldd	r27, Y+28	; 0x1c
    178a:	2a e3       	ldi	r18, 0x3A	; 58
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	bc 01       	movw	r22, r24
    1794:	cd 01       	movw	r24, r26
    1796:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__udivmodsi4>
    179a:	da 01       	movw	r26, r20
    179c:	c9 01       	movw	r24, r18
    179e:	9e 8f       	std	Y+30, r25	; 0x1e
    17a0:	8d 8f       	std	Y+29, r24	; 0x1d

    return distance;
    17a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
}
    17a6:	6e 96       	adiw	r28, 0x1e	; 30
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <motors_init>:
#include "../../MCAL/DIO/DIO_int.h"
#include "../../MCAL/PWM/PWM.h"

// Motor control functions
void motors_init()
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    // Initialize motor control pins as output on PORTC
    //DIO_vSetPinDir(CONTROL_PORT, MOTOR_A_ENABLE_PIN, DIO_OUTPUT);
    DIO_vSetPinDir(CONTROL_PORT, MOTOR_A_IN1_PIN, DIO_OUTPUT);
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_vSetPinDir>
    DIO_vSetPinDir(CONTROL_PORT, MOTOR_A_IN2_PIN, DIO_OUTPUT);
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	62 e0       	ldi	r22, 0x02	; 2
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_vSetPinDir>
    //DIO_vSetPinDir(CONTROL_PORT, MOTOR_B_ENABLE_PIN, DIO_OUTPUT);
    DIO_vSetPinDir(CONTROL_PORT, MOTOR_B_IN1_PIN, DIO_OUTPUT);
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	64 e0       	ldi	r22, 0x04	; 4
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_vSetPinDir>
    DIO_vSetPinDir(CONTROL_PORT, MOTOR_B_IN2_PIN, DIO_OUTPUT);
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	65 e0       	ldi	r22, 0x05	; 5
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_vSetPinDir>
        //DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3);

        // Initialize PWM on OC1A (PC5) and OC1B (PC6)
        //pwm_init();

    pwm_init();
    17e8:	0e 94 28 07 	call	0xe50	; 0xe50 <pwm_init>
}
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <set_motor_speed>:

void set_motor_speed(uint16_t speed, uint8_t motor)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <set_motor_speed+0x6>
    17f8:	0f 92       	push	r0
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	6b 83       	std	Y+3, r22	; 0x03
    // Set the speed of the specified motor using PWM
	if (motor == MOTOR_A)
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	88 23       	and	r24, r24
    1808:	39 f4       	brne	.+14     	; 0x1818 <set_motor_speed+0x26>
	{
		set_pwm_duty_cycle(pwm_A, speed); // Set PWM duty cycle for Motor A
    180a:	29 81       	ldd	r18, Y+1	; 0x01
    180c:	3a 81       	ldd	r19, Y+2	; 0x02
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	b9 01       	movw	r22, r18
    1812:	0e 94 4a 07 	call	0xe94	; 0xe94 <set_pwm_duty_cycle>
    1816:	09 c0       	rjmp	.+18     	; 0x182a <set_motor_speed+0x38>
	}
	else if (motor == MOTOR_B)
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	31 f4       	brne	.+12     	; 0x182a <set_motor_speed+0x38>
	{
		set_pwm_duty_cycle(pwm_B, speed); // Set PWM duty cycle for Motor B
    181e:	29 81       	ldd	r18, Y+1	; 0x01
    1820:	3a 81       	ldd	r19, Y+2	; 0x02
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	b9 01       	movw	r22, r18
    1826:	0e 94 4a 07 	call	0xe94	; 0xe94 <set_pwm_duty_cycle>
	}

}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <set_motor_direction>:

void set_motor_direction(uint8_t direction, uint8_t motor)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <set_motor_direction+0x6>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	6a 83       	std	Y+2, r22	; 0x02
    	{
    		CLR_BIT(CONTROL_PORT, MOTOR_B_IN1_PIN);
    		SET_BIT(CONTROL_PORT, MOTOR_B_IN2_PIN);
    }*/

	if (motor == MOTOR_A) {
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	88 23       	and	r24, r24
    1848:	21 f5       	brne	.+72     	; 0x1892 <set_motor_direction+0x5c>
	        if (direction == FORWARD) {
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	88 23       	and	r24, r24
    184e:	79 f4       	brne	.+30     	; 0x186e <set_motor_direction+0x38>
	            PORTC |= (1 << MOTOR_A_IN1_PIN);
    1850:	a5 e3       	ldi	r26, 0x35	; 53
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e3       	ldi	r30, 0x35	; 53
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	82 60       	ori	r24, 0x02	; 2
    185c:	8c 93       	st	X, r24
	            PORTC &= ~(1 << MOTOR_A_IN2_PIN);
    185e:	a5 e3       	ldi	r26, 0x35	; 53
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e3       	ldi	r30, 0x35	; 53
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	8b 7f       	andi	r24, 0xFB	; 251
    186a:	8c 93       	st	X, r24
    186c:	38 c0       	rjmp	.+112    	; 0x18de <set_motor_direction+0xa8>
	        } else if (direction == BACKWARD) {
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	a9 f5       	brne	.+106    	; 0x18de <set_motor_direction+0xa8>
	            PORTC &= ~(1 << MOTOR_A_IN1_PIN);
    1874:	a5 e3       	ldi	r26, 0x35	; 53
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e5 e3       	ldi	r30, 0x35	; 53
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8d 7f       	andi	r24, 0xFD	; 253
    1880:	8c 93       	st	X, r24
	            PORTC |= (1 << MOTOR_A_IN2_PIN);
    1882:	a5 e3       	ldi	r26, 0x35	; 53
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e3       	ldi	r30, 0x35	; 53
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	84 60       	ori	r24, 0x04	; 4
    188e:	8c 93       	st	X, r24
    1890:	26 c0       	rjmp	.+76     	; 0x18de <set_motor_direction+0xa8>
	        }
	    } else if (motor == MOTOR_B) {
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	19 f5       	brne	.+70     	; 0x18de <set_motor_direction+0xa8>
	        if (direction == FORWARD) {
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	88 23       	and	r24, r24
    189c:	79 f4       	brne	.+30     	; 0x18bc <set_motor_direction+0x86>
	            PORTC |= (1 << MOTOR_B_IN1_PIN);
    189e:	a5 e3       	ldi	r26, 0x35	; 53
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e5 e3       	ldi	r30, 0x35	; 53
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	80 61       	ori	r24, 0x10	; 16
    18aa:	8c 93       	st	X, r24
	            PORTC &= ~(1 << MOTOR_B_IN2_PIN);
    18ac:	a5 e3       	ldi	r26, 0x35	; 53
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e3       	ldi	r30, 0x35	; 53
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 7d       	andi	r24, 0xDF	; 223
    18b8:	8c 93       	st	X, r24
    18ba:	11 c0       	rjmp	.+34     	; 0x18de <set_motor_direction+0xa8>
	        } else if (direction == BACKWARD) {
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	71 f4       	brne	.+28     	; 0x18de <set_motor_direction+0xa8>
	            PORTC &= ~(1 << MOTOR_B_IN1_PIN);
    18c2:	a5 e3       	ldi	r26, 0x35	; 53
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e5 e3       	ldi	r30, 0x35	; 53
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8f 7e       	andi	r24, 0xEF	; 239
    18ce:	8c 93       	st	X, r24
	            PORTC |= (1 << MOTOR_B_IN2_PIN);
    18d0:	a5 e3       	ldi	r26, 0x35	; 53
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 62       	ori	r24, 0x20	; 32
    18dc:	8c 93       	st	X, r24
	        }
	    }
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <move_both_motors>:

void move_both_motors(uint16_t  speedA, uint16_t  speedB, uint8_t directionA, uint8_t directionB)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <move_both_motors+0x6>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <move_both_motors+0x8>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <move_both_motors+0xa>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	7c 83       	std	Y+4, r23	; 0x04
    18fc:	6b 83       	std	Y+3, r22	; 0x03
    18fe:	4d 83       	std	Y+5, r20	; 0x05
    1900:	2e 83       	std	Y+6, r18	; 0x06
	//Enable the motors
	DIO_vSetPinVal( PORTD, DDD5, DIO_HIGH);
    1902:	e2 e3       	ldi	r30, 0x32	; 50
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	65 e0       	ldi	r22, 0x05	; 5
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_vSetPinVal>
	DIO_vSetPinVal(PORTD, DDD4, DIO_HIGH);
    1910:	e2 e3       	ldi	r30, 0x32	; 50
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	64 e0       	ldi	r22, 0x04	; 4
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_vSetPinVal>

    // Set speed and direction for both motors
    set_motor_speed(speedA, MOTOR_A);
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <set_motor_speed>
    set_motor_speed(speedB, MOTOR_B);
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <set_motor_speed>
    set_motor_direction(directionA, MOTOR_A);
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	0e 94 1b 0c 	call	0x1836	; 0x1836 <set_motor_direction>
    set_motor_direction(directionB, MOTOR_B);
    193a:	8e 81       	ldd	r24, Y+6	; 0x06
    193c:	61 e0       	ldi	r22, 0x01	; 1
    193e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <set_motor_direction>
}
    1942:	26 96       	adiw	r28, 0x06	; 6
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <stop_both_motors>:

void stop_both_motors()
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    // Stop both motors on PORTC
	//CLR_BIT(CONTROL_PORT, MOTOR_A_ENABLE_PIN);
	//CLR_BIT(CONTROL_PORT, MOTOR_B_ENABLE_PIN);
	PORTC &= ~((1 << PC5) | (1 << PC6));
    195c:	a5 e3       	ldi	r26, 0x35	; 53
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e3       	ldi	r30, 0x35	; 53
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8f 79       	andi	r24, 0x9F	; 159
    1968:	8c 93       	st	X, r24
}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <IR_sensor_init>:
 *  Created on: Aug 31, 2024
 *      Author: Raheek_Helal
 */
#include "IR.h"

void IR_sensor_init() {
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    // Set the IR sensor pin as input
    IR_SENSOR_DDR &= ~(1 << IR_SENSOR_INPUT);
    1978:	a7 e3       	ldi	r26, 0x37	; 55
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e7 e3       	ldi	r30, 0x37	; 55
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	8c 93       	st	X, r24
}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <IR_sensor_read>:

int IR_sensor_read() {
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <IR_sensor_read+0x6>
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    // Read the value from the IR sensor pin
    if (IR_SENSOR_PIN & (1 << IR_SENSOR_INPUT))
    1996:	e6 e3       	ldi	r30, 0x36	; 54
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	81 70       	andi	r24, 0x01	; 1
    19a2:	90 70       	andi	r25, 0x00	; 0
    19a4:	88 23       	and	r24, r24
    19a6:	29 f0       	breq	.+10     	; 0x19b2 <IR_sensor_read+0x26>
    {
        return 1; // IR sensor detected an object
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <IR_sensor_read+0x2a>
    }
    else
    {
        return 0; // No object detected by IR sensor
    19b2:	1a 82       	std	Y+2, r1	; 0x02
    19b4:	19 82       	std	Y+1, r1	; 0x01
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	9a 81       	ldd	r25, Y+2	; 0x02
    }
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <gyroscope_init>:
#include "../../MCAL/TWI/TWI_int.h"

#define GYRO_ADDRESS 0x69

void gyroscope_init()
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    // Initialize gyroscope settings if needed
}
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <read_gyroscope_data>:

int16_t read_gyroscope_data(uint8_t axis) {
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <read_gyroscope_data+0x6>
    19d8:	0f 92       	push	r0
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	8b 83       	std	Y+3, r24	; 0x03
    int16_t gyro_data;

    MTWI_u8SendStartCondition();
    19e0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MTWI_u8SendStartCondition>
    MTWI_u8SendSlaveAddressRw(GYRO_ADDRESS, TWI_WRITE);
    19e4:	89 e6       	ldi	r24, 0x69	; 105
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	0e 94 89 06 	call	0xd12	; 0xd12 <MTWI_u8SendSlaveAddressRw>
    MTWI_u8SendByte(axis);
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	0e 94 b4 06 	call	0xd68	; 0xd68 <MTWI_u8SendByte>
    MTWI_u8SendRepeatedStartCondition();
    19f2:	0e 94 75 06 	call	0xcea	; 0xcea <MTWI_u8SendRepeatedStartCondition>
    MTWI_u8SendSlaveAddressRw(GYRO_ADDRESS, TWI_READ);
    19f6:	89 e6       	ldi	r24, 0x69	; 105
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	0e 94 89 06 	call	0xd12	; 0xd12 <MTWI_u8SendSlaveAddressRw>

    gyro_data = (int16_t)(MTWI_u8ReceiveByte(&axis, TWI_ACK)) << 8;
    19fe:	ce 01       	movw	r24, r28
    1a00:	03 96       	adiw	r24, 0x03	; 3
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	0e 94 cf 06 	call	0xd9e	; 0xd9e <MTWI_u8ReceiveByte>
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	88 27       	eor	r24, r24
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
    gyro_data |= MTWI_u8ReceiveByte(&axis, TWI_NOT_ACK);
    1a14:	ce 01       	movw	r24, r28
    1a16:	03 96       	adiw	r24, 0x03	; 3
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <MTWI_u8ReceiveByte>
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	82 2b       	or	r24, r18
    1a28:	93 2b       	or	r25, r19
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01

    MTWI_u8SendStopCondition();
    1a2e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MTWI_u8SendStopCondition>

    return gyro_data;
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <encoder_init>:
#include "Encoder.h"
#include <stdio.h>

// Initialize encoder pins
void encoder_init()
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    // Set encoder pins as inputs
    DIO_vSetPinDir  ( DIO_PORTD, ENCODER_A_PIN, DIO_INPUT );
    1a4a:	83 e0       	ldi	r24, 0x03	; 3
    1a4c:	62 e0       	ldi	r22, 0x02	; 2
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_vSetPinDir>
    DIO_vSetPinDir  ( DIO_PORTD, ENCODER_B_PIN, DIO_INPUT );
    1a54:	83 e0       	ldi	r24, 0x03	; 3
    1a56:	63 e0       	ldi	r22, 0x03	; 3
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 70 07 	call	0xee0	; 0xee0 <DIO_vSetPinDir>

    // Enable pull-up resistors for encoder pins
    DIO_vSetPinVal  ( DIO_PORTD, ENCODER_A_PIN, DIO_HIGH );
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	62 e0       	ldi	r22, 0x02	; 2
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_vSetPinVal>
    DIO_vSetPinVal  ( DIO_PORTD, ENCODER_B_PIN, DIO_HIGH );
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	63 e0       	ldi	r22, 0x03	; 3
    1a6c:	41 e0       	ldi	r20, 0x01	; 1
    1a6e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DIO_vSetPinVal>
}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <read_encoder_position>:

// Read encoder position
int read_encoder_position()
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	0f 92       	push	r0
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    static uint8_t prev_state = 0;
    static int position = 0;

    uint8_t current_state = (PIND & ((1 << ENCODER_A_PIN) | (1 << ENCODER_B_PIN)));
    1a82:	e0 e3       	ldi	r30, 0x30	; 48
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	8c 70       	andi	r24, 0x0C	; 12
    1a8a:	89 83       	std	Y+1, r24	; 0x01

    if (prev_state == 0b00 && current_state == 0b01) {
    1a8c:	80 91 80 00 	lds	r24, 0x0080
    1a90:	88 23       	and	r24, r24
    1a92:	69 f4       	brne	.+26     	; 0x1aae <read_encoder_position+0x36>
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	51 f4       	brne	.+20     	; 0x1aae <read_encoder_position+0x36>
        position++;
    1a9a:	80 91 7e 00 	lds	r24, 0x007E
    1a9e:	90 91 7f 00 	lds	r25, 0x007F
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	90 93 7f 00 	sts	0x007F, r25
    1aa8:	80 93 7e 00 	sts	0x007E, r24
    1aac:	32 c0       	rjmp	.+100    	; 0x1b12 <read_encoder_position+0x9a>
    } else if (prev_state == 0b01 && current_state == 0b11) {
    1aae:	80 91 80 00 	lds	r24, 0x0080
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	69 f4       	brne	.+26     	; 0x1ad0 <read_encoder_position+0x58>
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	83 30       	cpi	r24, 0x03	; 3
    1aba:	51 f4       	brne	.+20     	; 0x1ad0 <read_encoder_position+0x58>
        position++;
    1abc:	80 91 7e 00 	lds	r24, 0x007E
    1ac0:	90 91 7f 00 	lds	r25, 0x007F
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	90 93 7f 00 	sts	0x007F, r25
    1aca:	80 93 7e 00 	sts	0x007E, r24
    1ace:	21 c0       	rjmp	.+66     	; 0x1b12 <read_encoder_position+0x9a>
    } else if (prev_state == 0b11 && current_state == 0b10) {
    1ad0:	80 91 80 00 	lds	r24, 0x0080
    1ad4:	83 30       	cpi	r24, 0x03	; 3
    1ad6:	69 f4       	brne	.+26     	; 0x1af2 <read_encoder_position+0x7a>
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	51 f4       	brne	.+20     	; 0x1af2 <read_encoder_position+0x7a>
        position--;
    1ade:	80 91 7e 00 	lds	r24, 0x007E
    1ae2:	90 91 7f 00 	lds	r25, 0x007F
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	90 93 7f 00 	sts	0x007F, r25
    1aec:	80 93 7e 00 	sts	0x007E, r24
    1af0:	10 c0       	rjmp	.+32     	; 0x1b12 <read_encoder_position+0x9a>
    } else if (prev_state == 0b10 && current_state == 0b00) {
    1af2:	80 91 80 00 	lds	r24, 0x0080
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	61 f4       	brne	.+24     	; 0x1b12 <read_encoder_position+0x9a>
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	88 23       	and	r24, r24
    1afe:	49 f4       	brne	.+18     	; 0x1b12 <read_encoder_position+0x9a>
        position--;
    1b00:	80 91 7e 00 	lds	r24, 0x007E
    1b04:	90 91 7f 00 	lds	r25, 0x007F
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	90 93 7f 00 	sts	0x007F, r25
    1b0e:	80 93 7e 00 	sts	0x007E, r24
    }

    prev_state = current_state;
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	80 93 80 00 	sts	0x0080, r24
    printf("Position Change: %d\n", position);
    1b18:	20 91 7e 00 	lds	r18, 0x007E
    1b1c:	30 91 7f 00 	lds	r19, 0x007F
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <read_encoder_position+0xaa>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <read_encoder_position+0xac>
    1b24:	ed b7       	in	r30, 0x3d	; 61
    1b26:	fe b7       	in	r31, 0x3e	; 62
    1b28:	31 96       	adiw	r30, 0x01	; 1
    1b2a:	80 e6       	ldi	r24, 0x60	; 96
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	33 83       	std	Z+3, r19	; 0x03
    1b34:	22 83       	std	Z+2, r18	; 0x02
    1b36:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <printf>
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0

    return position;
    1b42:	80 91 7e 00 	lds	r24, 0x007E
    1b46:	90 91 7f 00 	lds	r25, 0x007F
}
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "../HAL/Ultrasonic-Sensor/Ultrasonic_int.h"

int main() {
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	60 97       	sbiw	r28, 0x10	; 16
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    uint16_t distance_cm;

    // Set PB0 and PB1 as output pins
    DDRB |= (1 << PB0) | (1 << PB1);
    1b66:	a7 e3       	ldi	r26, 0x37	; 55
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e7 e3       	ldi	r30, 0x37	; 55
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	83 60       	ori	r24, 0x03	; 3
    1b72:	8c 93       	st	X, r24

    // Initialize ultrasonic sensor
    ultrasonic_init();
    1b74:	0e 94 ae 0a 	call	0x155c	; 0x155c <ultrasonic_init>

    while (1) {
        // Read distance from ultrasonic sensor
        distance_cm = ultrasonic_get_distance();
    1b78:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ultrasonic_get_distance>
    1b7c:	98 8b       	std	Y+16, r25	; 0x10
    1b7e:	8f 87       	std	Y+15, r24	; 0x0f

        // Control PB0 and PB1 based on distance readings
        if (distance_cm < 10) {
    1b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b82:	98 89       	ldd	r25, Y+16	; 0x10
    1b84:	8a 30       	cpi	r24, 0x0A	; 10
    1b86:	91 05       	cpc	r25, r1
    1b88:	78 f4       	brcc	.+30     	; 0x1ba8 <main+0x56>
            PORTB |= (1 << PB0);  // Set PB0
    1b8a:	a8 e3       	ldi	r26, 0x38	; 56
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e8 e3       	ldi	r30, 0x38	; 56
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	81 60       	ori	r24, 0x01	; 1
    1b96:	8c 93       	st	X, r24
            PORTB &= ~(1 << PB1); // Clear PB1
    1b98:	a8 e3       	ldi	r26, 0x38	; 56
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e8 e3       	ldi	r30, 0x38	; 56
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8d 7f       	andi	r24, 0xFD	; 253
    1ba4:	8c 93       	st	X, r24
    1ba6:	27 c0       	rjmp	.+78     	; 0x1bf6 <main+0xa4>
        } else if (distance_cm >= 10 && distance_cm < 20) {
    1ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1baa:	98 89       	ldd	r25, Y+16	; 0x10
    1bac:	8a 30       	cpi	r24, 0x0A	; 10
    1bae:	91 05       	cpc	r25, r1
    1bb0:	a0 f0       	brcs	.+40     	; 0x1bda <main+0x88>
    1bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb4:	98 89       	ldd	r25, Y+16	; 0x10
    1bb6:	84 31       	cpi	r24, 0x14	; 20
    1bb8:	91 05       	cpc	r25, r1
    1bba:	78 f4       	brcc	.+30     	; 0x1bda <main+0x88>
            PORTB &= ~(1 << PB0); // Clear PB0
    1bbc:	a8 e3       	ldi	r26, 0x38	; 56
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e8 e3       	ldi	r30, 0x38	; 56
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8e 7f       	andi	r24, 0xFE	; 254
    1bc8:	8c 93       	st	X, r24
            PORTB |= (1 << PB1);  // Set PB1
    1bca:	a8 e3       	ldi	r26, 0x38	; 56
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e8 e3       	ldi	r30, 0x38	; 56
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	82 60       	ori	r24, 0x02	; 2
    1bd6:	8c 93       	st	X, r24
    1bd8:	0e c0       	rjmp	.+28     	; 0x1bf6 <main+0xa4>
        } else {
            PORTB |= (1 << PB0);  // Set PB0
    1bda:	a8 e3       	ldi	r26, 0x38	; 56
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	81 60       	ori	r24, 0x01	; 1
    1be6:	8c 93       	st	X, r24
            PORTB |= (1 << PB1);  // Set PB1
    1be8:	a8 e3       	ldi	r26, 0x38	; 56
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e8 e3       	ldi	r30, 0x38	; 56
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	82 60       	ori	r24, 0x02	; 2
    1bf4:	8c 93       	st	X, r24
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a8 ec       	ldi	r26, 0xC8	; 200
    1bfc:	b2 e4       	ldi	r27, 0x42	; 66
    1bfe:	8b 87       	std	Y+11, r24	; 0x0b
    1c00:	9c 87       	std	Y+12, r25	; 0x0c
    1c02:	ad 87       	std	Y+13, r26	; 0x0d
    1c04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e8       	ldi	r19, 0x80	; 128
    1c12:	4b e3       	ldi	r20, 0x3B	; 59
    1c14:	55 e4       	ldi	r21, 0x45	; 69
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	8f 83       	std	Y+7, r24	; 0x07
    1c20:	98 87       	std	Y+8, r25	; 0x08
    1c22:	a9 87       	std	Y+9, r26	; 0x09
    1c24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c26:	6f 81       	ldd	r22, Y+7	; 0x07
    1c28:	78 85       	ldd	r23, Y+8	; 0x08
    1c2a:	89 85       	ldd	r24, Y+9	; 0x09
    1c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <main+0xf6>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <main+0x174>
	else if (__tmp > 65535)
    1c48:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4a:	78 85       	ldd	r23, Y+8	; 0x08
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <main+0x156>
    1c8a:	8c e2       	ldi	r24, 0x2C	; 44
    1c8c:	91 e0       	ldi	r25, 0x01	; 1
    1c8e:	9c 83       	std	Y+4, r25	; 0x04
    1c90:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <main+0x144>
    1c9a:	9c 83       	std	Y+4, r25	; 0x04
    1c9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <main+0x138>
    1cb0:	63 cf       	rjmp	.-314    	; 0x1b78 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <main+0x180>
    1cd6:	9a 83       	std	Y+2, r25	; 0x02
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	4e cf       	rjmp	.-356    	; 0x1b78 <main+0x26>

00001cdc <__udivmodsi4>:
    1cdc:	a1 e2       	ldi	r26, 0x21	; 33
    1cde:	1a 2e       	mov	r1, r26
    1ce0:	aa 1b       	sub	r26, r26
    1ce2:	bb 1b       	sub	r27, r27
    1ce4:	fd 01       	movw	r30, r26
    1ce6:	0d c0       	rjmp	.+26     	; 0x1d02 <__udivmodsi4_ep>

00001ce8 <__udivmodsi4_loop>:
    1ce8:	aa 1f       	adc	r26, r26
    1cea:	bb 1f       	adc	r27, r27
    1cec:	ee 1f       	adc	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	a2 17       	cp	r26, r18
    1cf2:	b3 07       	cpc	r27, r19
    1cf4:	e4 07       	cpc	r30, r20
    1cf6:	f5 07       	cpc	r31, r21
    1cf8:	20 f0       	brcs	.+8      	; 0x1d02 <__udivmodsi4_ep>
    1cfa:	a2 1b       	sub	r26, r18
    1cfc:	b3 0b       	sbc	r27, r19
    1cfe:	e4 0b       	sbc	r30, r20
    1d00:	f5 0b       	sbc	r31, r21

00001d02 <__udivmodsi4_ep>:
    1d02:	66 1f       	adc	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	88 1f       	adc	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	1a 94       	dec	r1
    1d0c:	69 f7       	brne	.-38     	; 0x1ce8 <__udivmodsi4_loop>
    1d0e:	60 95       	com	r22
    1d10:	70 95       	com	r23
    1d12:	80 95       	com	r24
    1d14:	90 95       	com	r25
    1d16:	9b 01       	movw	r18, r22
    1d18:	ac 01       	movw	r20, r24
    1d1a:	bd 01       	movw	r22, r26
    1d1c:	cf 01       	movw	r24, r30
    1d1e:	08 95       	ret

00001d20 <__prologue_saves__>:
    1d20:	2f 92       	push	r2
    1d22:	3f 92       	push	r3
    1d24:	4f 92       	push	r4
    1d26:	5f 92       	push	r5
    1d28:	6f 92       	push	r6
    1d2a:	7f 92       	push	r7
    1d2c:	8f 92       	push	r8
    1d2e:	9f 92       	push	r9
    1d30:	af 92       	push	r10
    1d32:	bf 92       	push	r11
    1d34:	cf 92       	push	r12
    1d36:	df 92       	push	r13
    1d38:	ef 92       	push	r14
    1d3a:	ff 92       	push	r15
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	ca 1b       	sub	r28, r26
    1d4a:	db 0b       	sbc	r29, r27
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	09 94       	ijmp

00001d58 <__epilogue_restores__>:
    1d58:	2a 88       	ldd	r2, Y+18	; 0x12
    1d5a:	39 88       	ldd	r3, Y+17	; 0x11
    1d5c:	48 88       	ldd	r4, Y+16	; 0x10
    1d5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d60:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d62:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d64:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d66:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d68:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d6a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d6c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d6e:	df 80       	ldd	r13, Y+7	; 0x07
    1d70:	ee 80       	ldd	r14, Y+6	; 0x06
    1d72:	fd 80       	ldd	r15, Y+5	; 0x05
    1d74:	0c 81       	ldd	r16, Y+4	; 0x04
    1d76:	1b 81       	ldd	r17, Y+3	; 0x03
    1d78:	aa 81       	ldd	r26, Y+2	; 0x02
    1d7a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d7c:	ce 0f       	add	r28, r30
    1d7e:	d1 1d       	adc	r29, r1
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	ed 01       	movw	r28, r26
    1d8c:	08 95       	ret

00001d8e <printf>:
    1d8e:	a0 e0       	ldi	r26, 0x00	; 0
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	ed ec       	ldi	r30, 0xCD	; 205
    1d94:	fe e0       	ldi	r31, 0x0E	; 14
    1d96:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__prologue_saves__+0x20>
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	35 96       	adiw	r30, 0x05	; 5
    1d9e:	61 91       	ld	r22, Z+
    1da0:	71 91       	ld	r23, Z+
    1da2:	80 91 83 00 	lds	r24, 0x0083
    1da6:	90 91 84 00 	lds	r25, 0x0084
    1daa:	af 01       	movw	r20, r30
    1dac:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <vfprintf>
    1db0:	20 96       	adiw	r28, 0x00	; 0
    1db2:	e2 e0       	ldi	r30, 0x02	; 2
    1db4:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__epilogue_restores__+0x20>

00001db8 <vfprintf>:
    1db8:	ab e0       	ldi	r26, 0x0B	; 11
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 ee       	ldi	r30, 0xE2	; 226
    1dbe:	fe e0       	ldi	r31, 0x0E	; 14
    1dc0:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__prologue_saves__>
    1dc4:	3c 01       	movw	r6, r24
    1dc6:	2b 01       	movw	r4, r22
    1dc8:	5a 01       	movw	r10, r20
    1dca:	fc 01       	movw	r30, r24
    1dcc:	17 82       	std	Z+7, r1	; 0x07
    1dce:	16 82       	std	Z+6, r1	; 0x06
    1dd0:	83 81       	ldd	r24, Z+3	; 0x03
    1dd2:	81 fd       	sbrc	r24, 1
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <vfprintf+0x24>
    1dd6:	6f ef       	ldi	r22, 0xFF	; 255
    1dd8:	7f ef       	ldi	r23, 0xFF	; 255
    1dda:	c6 c1       	rjmp	.+908    	; 0x2168 <vfprintf+0x3b0>
    1ddc:	9a e0       	ldi	r25, 0x0A	; 10
    1dde:	89 2e       	mov	r8, r25
    1de0:	1e 01       	movw	r2, r28
    1de2:	08 94       	sec
    1de4:	21 1c       	adc	r2, r1
    1de6:	31 1c       	adc	r3, r1
    1de8:	f3 01       	movw	r30, r6
    1dea:	23 81       	ldd	r18, Z+3	; 0x03
    1dec:	f2 01       	movw	r30, r4
    1dee:	23 fd       	sbrc	r18, 3
    1df0:	85 91       	lpm	r24, Z+
    1df2:	23 ff       	sbrs	r18, 3
    1df4:	81 91       	ld	r24, Z+
    1df6:	2f 01       	movw	r4, r30
    1df8:	88 23       	and	r24, r24
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <vfprintf+0x46>
    1dfc:	b2 c1       	rjmp	.+868    	; 0x2162 <vfprintf+0x3aa>
    1dfe:	85 32       	cpi	r24, 0x25	; 37
    1e00:	39 f4       	brne	.+14     	; 0x1e10 <vfprintf+0x58>
    1e02:	23 fd       	sbrc	r18, 3
    1e04:	85 91       	lpm	r24, Z+
    1e06:	23 ff       	sbrs	r18, 3
    1e08:	81 91       	ld	r24, Z+
    1e0a:	2f 01       	movw	r4, r30
    1e0c:	85 32       	cpi	r24, 0x25	; 37
    1e0e:	29 f4       	brne	.+10     	; 0x1e1a <vfprintf+0x62>
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	b3 01       	movw	r22, r6
    1e14:	0e 94 cf 10 	call	0x219e	; 0x219e <fputc>
    1e18:	e7 cf       	rjmp	.-50     	; 0x1de8 <vfprintf+0x30>
    1e1a:	98 2f       	mov	r25, r24
    1e1c:	ff 24       	eor	r15, r15
    1e1e:	ee 24       	eor	r14, r14
    1e20:	99 24       	eor	r9, r9
    1e22:	ff e1       	ldi	r31, 0x1F	; 31
    1e24:	ff 15       	cp	r31, r15
    1e26:	d0 f0       	brcs	.+52     	; 0x1e5c <vfprintf+0xa4>
    1e28:	9b 32       	cpi	r25, 0x2B	; 43
    1e2a:	69 f0       	breq	.+26     	; 0x1e46 <vfprintf+0x8e>
    1e2c:	9c 32       	cpi	r25, 0x2C	; 44
    1e2e:	28 f4       	brcc	.+10     	; 0x1e3a <vfprintf+0x82>
    1e30:	90 32       	cpi	r25, 0x20	; 32
    1e32:	59 f0       	breq	.+22     	; 0x1e4a <vfprintf+0x92>
    1e34:	93 32       	cpi	r25, 0x23	; 35
    1e36:	91 f4       	brne	.+36     	; 0x1e5c <vfprintf+0xa4>
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <vfprintf+0x9e>
    1e3a:	9d 32       	cpi	r25, 0x2D	; 45
    1e3c:	49 f0       	breq	.+18     	; 0x1e50 <vfprintf+0x98>
    1e3e:	90 33       	cpi	r25, 0x30	; 48
    1e40:	69 f4       	brne	.+26     	; 0x1e5c <vfprintf+0xa4>
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	24 c0       	rjmp	.+72     	; 0x1e8e <vfprintf+0xd6>
    1e46:	52 e0       	ldi	r21, 0x02	; 2
    1e48:	f5 2a       	or	r15, r21
    1e4a:	84 e0       	ldi	r24, 0x04	; 4
    1e4c:	f8 2a       	or	r15, r24
    1e4e:	28 c0       	rjmp	.+80     	; 0x1ea0 <vfprintf+0xe8>
    1e50:	98 e0       	ldi	r25, 0x08	; 8
    1e52:	f9 2a       	or	r15, r25
    1e54:	25 c0       	rjmp	.+74     	; 0x1ea0 <vfprintf+0xe8>
    1e56:	e0 e1       	ldi	r30, 0x10	; 16
    1e58:	fe 2a       	or	r15, r30
    1e5a:	22 c0       	rjmp	.+68     	; 0x1ea0 <vfprintf+0xe8>
    1e5c:	f7 fc       	sbrc	r15, 7
    1e5e:	29 c0       	rjmp	.+82     	; 0x1eb2 <vfprintf+0xfa>
    1e60:	89 2f       	mov	r24, r25
    1e62:	80 53       	subi	r24, 0x30	; 48
    1e64:	8a 30       	cpi	r24, 0x0A	; 10
    1e66:	70 f4       	brcc	.+28     	; 0x1e84 <vfprintf+0xcc>
    1e68:	f6 fe       	sbrs	r15, 6
    1e6a:	05 c0       	rjmp	.+10     	; 0x1e76 <vfprintf+0xbe>
    1e6c:	98 9c       	mul	r9, r8
    1e6e:	90 2c       	mov	r9, r0
    1e70:	11 24       	eor	r1, r1
    1e72:	98 0e       	add	r9, r24
    1e74:	15 c0       	rjmp	.+42     	; 0x1ea0 <vfprintf+0xe8>
    1e76:	e8 9c       	mul	r14, r8
    1e78:	e0 2c       	mov	r14, r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	e8 0e       	add	r14, r24
    1e7e:	f0 e2       	ldi	r31, 0x20	; 32
    1e80:	ff 2a       	or	r15, r31
    1e82:	0e c0       	rjmp	.+28     	; 0x1ea0 <vfprintf+0xe8>
    1e84:	9e 32       	cpi	r25, 0x2E	; 46
    1e86:	29 f4       	brne	.+10     	; 0x1e92 <vfprintf+0xda>
    1e88:	f6 fc       	sbrc	r15, 6
    1e8a:	6b c1       	rjmp	.+726    	; 0x2162 <vfprintf+0x3aa>
    1e8c:	40 e4       	ldi	r20, 0x40	; 64
    1e8e:	f4 2a       	or	r15, r20
    1e90:	07 c0       	rjmp	.+14     	; 0x1ea0 <vfprintf+0xe8>
    1e92:	9c 36       	cpi	r25, 0x6C	; 108
    1e94:	19 f4       	brne	.+6      	; 0x1e9c <vfprintf+0xe4>
    1e96:	50 e8       	ldi	r21, 0x80	; 128
    1e98:	f5 2a       	or	r15, r21
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <vfprintf+0xe8>
    1e9c:	98 36       	cpi	r25, 0x68	; 104
    1e9e:	49 f4       	brne	.+18     	; 0x1eb2 <vfprintf+0xfa>
    1ea0:	f2 01       	movw	r30, r4
    1ea2:	23 fd       	sbrc	r18, 3
    1ea4:	95 91       	lpm	r25, Z+
    1ea6:	23 ff       	sbrs	r18, 3
    1ea8:	91 91       	ld	r25, Z+
    1eaa:	2f 01       	movw	r4, r30
    1eac:	99 23       	and	r25, r25
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <vfprintf+0xfa>
    1eb0:	b8 cf       	rjmp	.-144    	; 0x1e22 <vfprintf+0x6a>
    1eb2:	89 2f       	mov	r24, r25
    1eb4:	85 54       	subi	r24, 0x45	; 69
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	18 f0       	brcs	.+6      	; 0x1ec0 <vfprintf+0x108>
    1eba:	80 52       	subi	r24, 0x20	; 32
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	38 f4       	brcc	.+14     	; 0x1ece <vfprintf+0x116>
    1ec0:	44 e0       	ldi	r20, 0x04	; 4
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	a4 0e       	add	r10, r20
    1ec6:	b5 1e       	adc	r11, r21
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	59 83       	std	Y+1, r21	; 0x01
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <vfprintf+0x134>
    1ece:	93 36       	cpi	r25, 0x63	; 99
    1ed0:	31 f0       	breq	.+12     	; 0x1ede <vfprintf+0x126>
    1ed2:	93 37       	cpi	r25, 0x73	; 115
    1ed4:	79 f0       	breq	.+30     	; 0x1ef4 <vfprintf+0x13c>
    1ed6:	93 35       	cpi	r25, 0x53	; 83
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <vfprintf+0x124>
    1eda:	56 c0       	rjmp	.+172    	; 0x1f88 <vfprintf+0x1d0>
    1edc:	20 c0       	rjmp	.+64     	; 0x1f1e <vfprintf+0x166>
    1ede:	f5 01       	movw	r30, r10
    1ee0:	80 81       	ld	r24, Z
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	42 e0       	ldi	r20, 0x02	; 2
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	a4 0e       	add	r10, r20
    1eea:	b5 1e       	adc	r11, r21
    1eec:	61 01       	movw	r12, r2
    1eee:	01 e0       	ldi	r16, 0x01	; 1
    1ef0:	10 e0       	ldi	r17, 0x00	; 0
    1ef2:	12 c0       	rjmp	.+36     	; 0x1f18 <vfprintf+0x160>
    1ef4:	f5 01       	movw	r30, r10
    1ef6:	c0 80       	ld	r12, Z
    1ef8:	d1 80       	ldd	r13, Z+1	; 0x01
    1efa:	f6 fc       	sbrc	r15, 6
    1efc:	03 c0       	rjmp	.+6      	; 0x1f04 <vfprintf+0x14c>
    1efe:	6f ef       	ldi	r22, 0xFF	; 255
    1f00:	7f ef       	ldi	r23, 0xFF	; 255
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <vfprintf+0x150>
    1f04:	69 2d       	mov	r22, r9
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	42 e0       	ldi	r20, 0x02	; 2
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	a4 0e       	add	r10, r20
    1f0e:	b5 1e       	adc	r11, r21
    1f10:	c6 01       	movw	r24, r12
    1f12:	0e 94 c4 10 	call	0x2188	; 0x2188 <strnlen>
    1f16:	8c 01       	movw	r16, r24
    1f18:	5f e7       	ldi	r21, 0x7F	; 127
    1f1a:	f5 22       	and	r15, r21
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <vfprintf+0x18e>
    1f1e:	f5 01       	movw	r30, r10
    1f20:	c0 80       	ld	r12, Z
    1f22:	d1 80       	ldd	r13, Z+1	; 0x01
    1f24:	f6 fc       	sbrc	r15, 6
    1f26:	03 c0       	rjmp	.+6      	; 0x1f2e <vfprintf+0x176>
    1f28:	6f ef       	ldi	r22, 0xFF	; 255
    1f2a:	7f ef       	ldi	r23, 0xFF	; 255
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <vfprintf+0x17a>
    1f2e:	69 2d       	mov	r22, r9
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	42 e0       	ldi	r20, 0x02	; 2
    1f34:	50 e0       	ldi	r21, 0x00	; 0
    1f36:	a4 0e       	add	r10, r20
    1f38:	b5 1e       	adc	r11, r21
    1f3a:	c6 01       	movw	r24, r12
    1f3c:	0e 94 b9 10 	call	0x2172	; 0x2172 <strnlen_P>
    1f40:	8c 01       	movw	r16, r24
    1f42:	50 e8       	ldi	r21, 0x80	; 128
    1f44:	f5 2a       	or	r15, r21
    1f46:	f3 fe       	sbrs	r15, 3
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <vfprintf+0x1a0>
    1f4a:	1a c0       	rjmp	.+52     	; 0x1f80 <vfprintf+0x1c8>
    1f4c:	80 e2       	ldi	r24, 0x20	; 32
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	b3 01       	movw	r22, r6
    1f52:	0e 94 cf 10 	call	0x219e	; 0x219e <fputc>
    1f56:	ea 94       	dec	r14
    1f58:	8e 2d       	mov	r24, r14
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	08 17       	cp	r16, r24
    1f5e:	19 07       	cpc	r17, r25
    1f60:	a8 f3       	brcs	.-22     	; 0x1f4c <vfprintf+0x194>
    1f62:	0e c0       	rjmp	.+28     	; 0x1f80 <vfprintf+0x1c8>
    1f64:	f6 01       	movw	r30, r12
    1f66:	f7 fc       	sbrc	r15, 7
    1f68:	85 91       	lpm	r24, Z+
    1f6a:	f7 fe       	sbrs	r15, 7
    1f6c:	81 91       	ld	r24, Z+
    1f6e:	6f 01       	movw	r12, r30
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	b3 01       	movw	r22, r6
    1f74:	0e 94 cf 10 	call	0x219e	; 0x219e <fputc>
    1f78:	e1 10       	cpse	r14, r1
    1f7a:	ea 94       	dec	r14
    1f7c:	01 50       	subi	r16, 0x01	; 1
    1f7e:	10 40       	sbci	r17, 0x00	; 0
    1f80:	01 15       	cp	r16, r1
    1f82:	11 05       	cpc	r17, r1
    1f84:	79 f7       	brne	.-34     	; 0x1f64 <vfprintf+0x1ac>
    1f86:	ea c0       	rjmp	.+468    	; 0x215c <vfprintf+0x3a4>
    1f88:	94 36       	cpi	r25, 0x64	; 100
    1f8a:	11 f0       	breq	.+4      	; 0x1f90 <vfprintf+0x1d8>
    1f8c:	99 36       	cpi	r25, 0x69	; 105
    1f8e:	69 f5       	brne	.+90     	; 0x1fea <vfprintf+0x232>
    1f90:	f7 fe       	sbrs	r15, 7
    1f92:	08 c0       	rjmp	.+16     	; 0x1fa4 <vfprintf+0x1ec>
    1f94:	f5 01       	movw	r30, r10
    1f96:	20 81       	ld	r18, Z
    1f98:	31 81       	ldd	r19, Z+1	; 0x01
    1f9a:	42 81       	ldd	r20, Z+2	; 0x02
    1f9c:	53 81       	ldd	r21, Z+3	; 0x03
    1f9e:	84 e0       	ldi	r24, 0x04	; 4
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0a c0       	rjmp	.+20     	; 0x1fb8 <vfprintf+0x200>
    1fa4:	f5 01       	movw	r30, r10
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	9c 01       	movw	r18, r24
    1fac:	44 27       	eor	r20, r20
    1fae:	37 fd       	sbrc	r19, 7
    1fb0:	40 95       	com	r20
    1fb2:	54 2f       	mov	r21, r20
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a8 0e       	add	r10, r24
    1fba:	b9 1e       	adc	r11, r25
    1fbc:	9f e6       	ldi	r25, 0x6F	; 111
    1fbe:	f9 22       	and	r15, r25
    1fc0:	57 ff       	sbrs	r21, 7
    1fc2:	09 c0       	rjmp	.+18     	; 0x1fd6 <vfprintf+0x21e>
    1fc4:	50 95       	com	r21
    1fc6:	40 95       	com	r20
    1fc8:	30 95       	com	r19
    1fca:	21 95       	neg	r18
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fce:	4f 4f       	sbci	r20, 0xFF	; 255
    1fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd2:	e0 e8       	ldi	r30, 0x80	; 128
    1fd4:	fe 2a       	or	r15, r30
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	b9 01       	movw	r22, r18
    1fda:	a1 01       	movw	r20, r2
    1fdc:	2a e0       	ldi	r18, 0x0A	; 10
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__ultoa_invert>
    1fe4:	d8 2e       	mov	r13, r24
    1fe6:	d2 18       	sub	r13, r2
    1fe8:	40 c0       	rjmp	.+128    	; 0x206a <vfprintf+0x2b2>
    1fea:	95 37       	cpi	r25, 0x75	; 117
    1fec:	29 f4       	brne	.+10     	; 0x1ff8 <vfprintf+0x240>
    1fee:	1f 2d       	mov	r17, r15
    1ff0:	1f 7e       	andi	r17, 0xEF	; 239
    1ff2:	2a e0       	ldi	r18, 0x0A	; 10
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	1d c0       	rjmp	.+58     	; 0x2032 <vfprintf+0x27a>
    1ff8:	1f 2d       	mov	r17, r15
    1ffa:	19 7f       	andi	r17, 0xF9	; 249
    1ffc:	9f 36       	cpi	r25, 0x6F	; 111
    1ffe:	61 f0       	breq	.+24     	; 0x2018 <vfprintf+0x260>
    2000:	90 37       	cpi	r25, 0x70	; 112
    2002:	20 f4       	brcc	.+8      	; 0x200c <vfprintf+0x254>
    2004:	98 35       	cpi	r25, 0x58	; 88
    2006:	09 f0       	breq	.+2      	; 0x200a <vfprintf+0x252>
    2008:	ac c0       	rjmp	.+344    	; 0x2162 <vfprintf+0x3aa>
    200a:	0f c0       	rjmp	.+30     	; 0x202a <vfprintf+0x272>
    200c:	90 37       	cpi	r25, 0x70	; 112
    200e:	39 f0       	breq	.+14     	; 0x201e <vfprintf+0x266>
    2010:	98 37       	cpi	r25, 0x78	; 120
    2012:	09 f0       	breq	.+2      	; 0x2016 <vfprintf+0x25e>
    2014:	a6 c0       	rjmp	.+332    	; 0x2162 <vfprintf+0x3aa>
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <vfprintf+0x268>
    2018:	28 e0       	ldi	r18, 0x08	; 8
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	0a c0       	rjmp	.+20     	; 0x2032 <vfprintf+0x27a>
    201e:	10 61       	ori	r17, 0x10	; 16
    2020:	14 fd       	sbrc	r17, 4
    2022:	14 60       	ori	r17, 0x04	; 4
    2024:	20 e1       	ldi	r18, 0x10	; 16
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <vfprintf+0x27a>
    202a:	14 fd       	sbrc	r17, 4
    202c:	16 60       	ori	r17, 0x06	; 6
    202e:	20 e1       	ldi	r18, 0x10	; 16
    2030:	32 e0       	ldi	r19, 0x02	; 2
    2032:	17 ff       	sbrs	r17, 7
    2034:	08 c0       	rjmp	.+16     	; 0x2046 <vfprintf+0x28e>
    2036:	f5 01       	movw	r30, r10
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	44 e0       	ldi	r20, 0x04	; 4
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	08 c0       	rjmp	.+16     	; 0x2056 <vfprintf+0x29e>
    2046:	f5 01       	movw	r30, r10
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	bc 01       	movw	r22, r24
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	42 e0       	ldi	r20, 0x02	; 2
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	a4 0e       	add	r10, r20
    2058:	b5 1e       	adc	r11, r21
    205a:	a1 01       	movw	r20, r2
    205c:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__ultoa_invert>
    2060:	d8 2e       	mov	r13, r24
    2062:	d2 18       	sub	r13, r2
    2064:	8f e7       	ldi	r24, 0x7F	; 127
    2066:	f8 2e       	mov	r15, r24
    2068:	f1 22       	and	r15, r17
    206a:	f6 fe       	sbrs	r15, 6
    206c:	0b c0       	rjmp	.+22     	; 0x2084 <vfprintf+0x2cc>
    206e:	5e ef       	ldi	r21, 0xFE	; 254
    2070:	f5 22       	and	r15, r21
    2072:	d9 14       	cp	r13, r9
    2074:	38 f4       	brcc	.+14     	; 0x2084 <vfprintf+0x2cc>
    2076:	f4 fe       	sbrs	r15, 4
    2078:	07 c0       	rjmp	.+14     	; 0x2088 <vfprintf+0x2d0>
    207a:	f2 fc       	sbrc	r15, 2
    207c:	05 c0       	rjmp	.+10     	; 0x2088 <vfprintf+0x2d0>
    207e:	8f ee       	ldi	r24, 0xEF	; 239
    2080:	f8 22       	and	r15, r24
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <vfprintf+0x2d0>
    2084:	1d 2d       	mov	r17, r13
    2086:	01 c0       	rjmp	.+2      	; 0x208a <vfprintf+0x2d2>
    2088:	19 2d       	mov	r17, r9
    208a:	f4 fe       	sbrs	r15, 4
    208c:	0d c0       	rjmp	.+26     	; 0x20a8 <vfprintf+0x2f0>
    208e:	fe 01       	movw	r30, r28
    2090:	ed 0d       	add	r30, r13
    2092:	f1 1d       	adc	r31, r1
    2094:	80 81       	ld	r24, Z
    2096:	80 33       	cpi	r24, 0x30	; 48
    2098:	19 f4       	brne	.+6      	; 0x20a0 <vfprintf+0x2e8>
    209a:	99 ee       	ldi	r25, 0xE9	; 233
    209c:	f9 22       	and	r15, r25
    209e:	08 c0       	rjmp	.+16     	; 0x20b0 <vfprintf+0x2f8>
    20a0:	1f 5f       	subi	r17, 0xFF	; 255
    20a2:	f2 fe       	sbrs	r15, 2
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <vfprintf+0x2f8>
    20a6:	03 c0       	rjmp	.+6      	; 0x20ae <vfprintf+0x2f6>
    20a8:	8f 2d       	mov	r24, r15
    20aa:	86 78       	andi	r24, 0x86	; 134
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <vfprintf+0x2f8>
    20ae:	1f 5f       	subi	r17, 0xFF	; 255
    20b0:	0f 2d       	mov	r16, r15
    20b2:	f3 fc       	sbrc	r15, 3
    20b4:	14 c0       	rjmp	.+40     	; 0x20de <vfprintf+0x326>
    20b6:	f0 fe       	sbrs	r15, 0
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <vfprintf+0x320>
    20ba:	1e 15       	cp	r17, r14
    20bc:	10 f0       	brcs	.+4      	; 0x20c2 <vfprintf+0x30a>
    20be:	9d 2c       	mov	r9, r13
    20c0:	0b c0       	rjmp	.+22     	; 0x20d8 <vfprintf+0x320>
    20c2:	9d 2c       	mov	r9, r13
    20c4:	9e 0c       	add	r9, r14
    20c6:	91 1a       	sub	r9, r17
    20c8:	1e 2d       	mov	r17, r14
    20ca:	06 c0       	rjmp	.+12     	; 0x20d8 <vfprintf+0x320>
    20cc:	80 e2       	ldi	r24, 0x20	; 32
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	b3 01       	movw	r22, r6
    20d2:	0e 94 cf 10 	call	0x219e	; 0x219e <fputc>
    20d6:	1f 5f       	subi	r17, 0xFF	; 255
    20d8:	1e 15       	cp	r17, r14
    20da:	c0 f3       	brcs	.-16     	; 0x20cc <vfprintf+0x314>
    20dc:	04 c0       	rjmp	.+8      	; 0x20e6 <vfprintf+0x32e>
    20de:	1e 15       	cp	r17, r14
    20e0:	10 f4       	brcc	.+4      	; 0x20e6 <vfprintf+0x32e>
    20e2:	e1 1a       	sub	r14, r17
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <vfprintf+0x330>
    20e6:	ee 24       	eor	r14, r14
    20e8:	04 ff       	sbrs	r16, 4
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <vfprintf+0x352>
    20ec:	80 e3       	ldi	r24, 0x30	; 48
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	b3 01       	movw	r22, r6
    20f2:	0e 94 cf 10 	call	0x219e	; 0x219e <fputc>
    20f6:	02 ff       	sbrs	r16, 2
    20f8:	1d c0       	rjmp	.+58     	; 0x2134 <vfprintf+0x37c>
    20fa:	01 fd       	sbrc	r16, 1
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <vfprintf+0x34c>
    20fe:	88 e7       	ldi	r24, 0x78	; 120
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e c0       	rjmp	.+28     	; 0x2120 <vfprintf+0x368>
    2104:	88 e5       	ldi	r24, 0x58	; 88
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0b c0       	rjmp	.+22     	; 0x2120 <vfprintf+0x368>
    210a:	80 2f       	mov	r24, r16
    210c:	86 78       	andi	r24, 0x86	; 134
    210e:	91 f0       	breq	.+36     	; 0x2134 <vfprintf+0x37c>
    2110:	01 ff       	sbrs	r16, 1
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <vfprintf+0x360>
    2114:	8b e2       	ldi	r24, 0x2B	; 43
    2116:	01 c0       	rjmp	.+2      	; 0x211a <vfprintf+0x362>
    2118:	80 e2       	ldi	r24, 0x20	; 32
    211a:	f7 fc       	sbrc	r15, 7
    211c:	8d e2       	ldi	r24, 0x2D	; 45
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	b3 01       	movw	r22, r6
    2122:	0e 94 cf 10 	call	0x219e	; 0x219e <fputc>
    2126:	06 c0       	rjmp	.+12     	; 0x2134 <vfprintf+0x37c>
    2128:	80 e3       	ldi	r24, 0x30	; 48
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	b3 01       	movw	r22, r6
    212e:	0e 94 cf 10 	call	0x219e	; 0x219e <fputc>
    2132:	9a 94       	dec	r9
    2134:	d9 14       	cp	r13, r9
    2136:	c0 f3       	brcs	.-16     	; 0x2128 <vfprintf+0x370>
    2138:	da 94       	dec	r13
    213a:	f1 01       	movw	r30, r2
    213c:	ed 0d       	add	r30, r13
    213e:	f1 1d       	adc	r31, r1
    2140:	80 81       	ld	r24, Z
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	b3 01       	movw	r22, r6
    2146:	0e 94 cf 10 	call	0x219e	; 0x219e <fputc>
    214a:	dd 20       	and	r13, r13
    214c:	a9 f7       	brne	.-22     	; 0x2138 <vfprintf+0x380>
    214e:	06 c0       	rjmp	.+12     	; 0x215c <vfprintf+0x3a4>
    2150:	80 e2       	ldi	r24, 0x20	; 32
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	b3 01       	movw	r22, r6
    2156:	0e 94 cf 10 	call	0x219e	; 0x219e <fputc>
    215a:	ea 94       	dec	r14
    215c:	ee 20       	and	r14, r14
    215e:	c1 f7       	brne	.-16     	; 0x2150 <vfprintf+0x398>
    2160:	43 ce       	rjmp	.-890    	; 0x1de8 <vfprintf+0x30>
    2162:	f3 01       	movw	r30, r6
    2164:	66 81       	ldd	r22, Z+6	; 0x06
    2166:	77 81       	ldd	r23, Z+7	; 0x07
    2168:	cb 01       	movw	r24, r22
    216a:	2b 96       	adiw	r28, 0x0b	; 11
    216c:	e2 e1       	ldi	r30, 0x12	; 18
    216e:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__epilogue_restores__>

00002172 <strnlen_P>:
    2172:	fc 01       	movw	r30, r24
    2174:	05 90       	lpm	r0, Z+
    2176:	61 50       	subi	r22, 0x01	; 1
    2178:	70 40       	sbci	r23, 0x00	; 0
    217a:	01 10       	cpse	r0, r1
    217c:	d8 f7       	brcc	.-10     	; 0x2174 <strnlen_P+0x2>
    217e:	80 95       	com	r24
    2180:	90 95       	com	r25
    2182:	8e 0f       	add	r24, r30
    2184:	9f 1f       	adc	r25, r31
    2186:	08 95       	ret

00002188 <strnlen>:
    2188:	fc 01       	movw	r30, r24
    218a:	61 50       	subi	r22, 0x01	; 1
    218c:	70 40       	sbci	r23, 0x00	; 0
    218e:	01 90       	ld	r0, Z+
    2190:	01 10       	cpse	r0, r1
    2192:	d8 f7       	brcc	.-10     	; 0x218a <strnlen+0x2>
    2194:	80 95       	com	r24
    2196:	90 95       	com	r25
    2198:	8e 0f       	add	r24, r30
    219a:	9f 1f       	adc	r25, r31
    219c:	08 95       	ret

0000219e <fputc>:
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	8c 01       	movw	r16, r24
    21a8:	eb 01       	movw	r28, r22
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	81 ff       	sbrs	r24, 1
    21ae:	1b c0       	rjmp	.+54     	; 0x21e6 <fputc+0x48>
    21b0:	82 ff       	sbrs	r24, 2
    21b2:	0d c0       	rjmp	.+26     	; 0x21ce <fputc+0x30>
    21b4:	2e 81       	ldd	r18, Y+6	; 0x06
    21b6:	3f 81       	ldd	r19, Y+7	; 0x07
    21b8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ba:	9d 81       	ldd	r25, Y+5	; 0x05
    21bc:	28 17       	cp	r18, r24
    21be:	39 07       	cpc	r19, r25
    21c0:	64 f4       	brge	.+24     	; 0x21da <fputc+0x3c>
    21c2:	e8 81       	ld	r30, Y
    21c4:	f9 81       	ldd	r31, Y+1	; 0x01
    21c6:	01 93       	st	Z+, r16
    21c8:	f9 83       	std	Y+1, r31	; 0x01
    21ca:	e8 83       	st	Y, r30
    21cc:	06 c0       	rjmp	.+12     	; 0x21da <fputc+0x3c>
    21ce:	e8 85       	ldd	r30, Y+8	; 0x08
    21d0:	f9 85       	ldd	r31, Y+9	; 0x09
    21d2:	80 2f       	mov	r24, r16
    21d4:	09 95       	icall
    21d6:	89 2b       	or	r24, r25
    21d8:	31 f4       	brne	.+12     	; 0x21e6 <fputc+0x48>
    21da:	8e 81       	ldd	r24, Y+6	; 0x06
    21dc:	9f 81       	ldd	r25, Y+7	; 0x07
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	9f 83       	std	Y+7, r25	; 0x07
    21e2:	8e 83       	std	Y+6, r24	; 0x06
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <fputc+0x4c>
    21e6:	0f ef       	ldi	r16, 0xFF	; 255
    21e8:	1f ef       	ldi	r17, 0xFF	; 255
    21ea:	c8 01       	movw	r24, r16
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <__ultoa_invert>:
    21f6:	fa 01       	movw	r30, r20
    21f8:	aa 27       	eor	r26, r26
    21fa:	28 30       	cpi	r18, 0x08	; 8
    21fc:	51 f1       	breq	.+84     	; 0x2252 <__ultoa_invert+0x5c>
    21fe:	20 31       	cpi	r18, 0x10	; 16
    2200:	81 f1       	breq	.+96     	; 0x2262 <__ultoa_invert+0x6c>
    2202:	e8 94       	clt
    2204:	6f 93       	push	r22
    2206:	6e 7f       	andi	r22, 0xFE	; 254
    2208:	6e 5f       	subi	r22, 0xFE	; 254
    220a:	7f 4f       	sbci	r23, 0xFF	; 255
    220c:	8f 4f       	sbci	r24, 0xFF	; 255
    220e:	9f 4f       	sbci	r25, 0xFF	; 255
    2210:	af 4f       	sbci	r26, 0xFF	; 255
    2212:	b1 e0       	ldi	r27, 0x01	; 1
    2214:	3e d0       	rcall	.+124    	; 0x2292 <__ultoa_invert+0x9c>
    2216:	b4 e0       	ldi	r27, 0x04	; 4
    2218:	3c d0       	rcall	.+120    	; 0x2292 <__ultoa_invert+0x9c>
    221a:	67 0f       	add	r22, r23
    221c:	78 1f       	adc	r23, r24
    221e:	89 1f       	adc	r24, r25
    2220:	9a 1f       	adc	r25, r26
    2222:	a1 1d       	adc	r26, r1
    2224:	68 0f       	add	r22, r24
    2226:	79 1f       	adc	r23, r25
    2228:	8a 1f       	adc	r24, r26
    222a:	91 1d       	adc	r25, r1
    222c:	a1 1d       	adc	r26, r1
    222e:	6a 0f       	add	r22, r26
    2230:	71 1d       	adc	r23, r1
    2232:	81 1d       	adc	r24, r1
    2234:	91 1d       	adc	r25, r1
    2236:	a1 1d       	adc	r26, r1
    2238:	20 d0       	rcall	.+64     	; 0x227a <__ultoa_invert+0x84>
    223a:	09 f4       	brne	.+2      	; 0x223e <__ultoa_invert+0x48>
    223c:	68 94       	set
    223e:	3f 91       	pop	r19
    2240:	2a e0       	ldi	r18, 0x0A	; 10
    2242:	26 9f       	mul	r18, r22
    2244:	11 24       	eor	r1, r1
    2246:	30 19       	sub	r19, r0
    2248:	30 5d       	subi	r19, 0xD0	; 208
    224a:	31 93       	st	Z+, r19
    224c:	de f6       	brtc	.-74     	; 0x2204 <__ultoa_invert+0xe>
    224e:	cf 01       	movw	r24, r30
    2250:	08 95       	ret
    2252:	46 2f       	mov	r20, r22
    2254:	47 70       	andi	r20, 0x07	; 7
    2256:	40 5d       	subi	r20, 0xD0	; 208
    2258:	41 93       	st	Z+, r20
    225a:	b3 e0       	ldi	r27, 0x03	; 3
    225c:	0f d0       	rcall	.+30     	; 0x227c <__ultoa_invert+0x86>
    225e:	c9 f7       	brne	.-14     	; 0x2252 <__ultoa_invert+0x5c>
    2260:	f6 cf       	rjmp	.-20     	; 0x224e <__ultoa_invert+0x58>
    2262:	46 2f       	mov	r20, r22
    2264:	4f 70       	andi	r20, 0x0F	; 15
    2266:	40 5d       	subi	r20, 0xD0	; 208
    2268:	4a 33       	cpi	r20, 0x3A	; 58
    226a:	18 f0       	brcs	.+6      	; 0x2272 <__ultoa_invert+0x7c>
    226c:	49 5d       	subi	r20, 0xD9	; 217
    226e:	31 fd       	sbrc	r19, 1
    2270:	40 52       	subi	r20, 0x20	; 32
    2272:	41 93       	st	Z+, r20
    2274:	02 d0       	rcall	.+4      	; 0x227a <__ultoa_invert+0x84>
    2276:	a9 f7       	brne	.-22     	; 0x2262 <__ultoa_invert+0x6c>
    2278:	ea cf       	rjmp	.-44     	; 0x224e <__ultoa_invert+0x58>
    227a:	b4 e0       	ldi	r27, 0x04	; 4
    227c:	a6 95       	lsr	r26
    227e:	97 95       	ror	r25
    2280:	87 95       	ror	r24
    2282:	77 95       	ror	r23
    2284:	67 95       	ror	r22
    2286:	ba 95       	dec	r27
    2288:	c9 f7       	brne	.-14     	; 0x227c <__ultoa_invert+0x86>
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	61 05       	cpc	r22, r1
    228e:	71 05       	cpc	r23, r1
    2290:	08 95       	ret
    2292:	9b 01       	movw	r18, r22
    2294:	ac 01       	movw	r20, r24
    2296:	0a 2e       	mov	r0, r26
    2298:	06 94       	lsr	r0
    229a:	57 95       	ror	r21
    229c:	47 95       	ror	r20
    229e:	37 95       	ror	r19
    22a0:	27 95       	ror	r18
    22a2:	ba 95       	dec	r27
    22a4:	c9 f7       	brne	.-14     	; 0x2298 <__ultoa_invert+0xa2>
    22a6:	62 0f       	add	r22, r18
    22a8:	73 1f       	adc	r23, r19
    22aa:	84 1f       	adc	r24, r20
    22ac:	95 1f       	adc	r25, r21
    22ae:	a0 1d       	adc	r26, r0
    22b0:	08 95       	ret

000022b2 <_exit>:
    22b2:	f8 94       	cli

000022b4 <__stop_program>:
    22b4:	ff cf       	rjmp	.-2      	; 0x22b4 <__stop_program>
